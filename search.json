[{"path":"https://epiverse-trace.github.io/serofoi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 serofoi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"what-is-the-foi","dir":"Articles","previous_headings":"","what":"What is the FoI","title":"An Introduction To Force-of-Infection Models","text":"FoI, also known hazard rate infection pressure, key concept mathematical modelling infectious diseases. represents rate susceptible individuals become infected given exposure pathogen. simple terms, FoI quantifies risk susceptible individual becoming infected period time. usually expressed rate per unit time (e.g., per day per year). illustrate , consider simple SIR model: dSdt=−βSI,dIdt=βSI−γI,dRdt=γI, \\begin{aligned}     \\frac{dS}{dt} &= -\\beta S ,\\\\     \\frac{dI}{dt} &= \\beta S - \\gamma ,\\\\     \\frac{dR}{dt} &= \\gamma , \\end{aligned} case, FoI defined λ(t)=βI(t)\\lambda(t) = \\beta (t) (Note FoI time dependent definition). solve system equations need know transmission rate β>0\\beta>0, rate recovery infection γ>0\\gamma>0, well initial conditions. Serocatalytic models offer simpler perspective. interested estimating risk historical exposure pathogen varies depending time birth individuals sample. , put together II RR compartments single seropositives compartment P(t)P(t) consider dynamics birth cohort separately dNτ(t)dt=−λ(t)Nτ(t),dPτ(t)dt=λ(t)Nτ(t),Nτ(t)+Pτ(t)=1;t<τ \\begin{aligned}     &\\frac{dN^{\\tau}(t)}{dt} = -\\lambda(t) N^{\\tau}(t),\\\\     &\\frac{dP^{\\tau}(t)}{dt} = \\lambda(t) N^{\\tau}(t), \\\\     &N^{\\tau}(t)+P^{\\tau}(t)=1; \\quad t<\\tau \\end{aligned}  0≤Nτ(t)≤10 \\leq N^\\tau(t)\\leq 1 proportion individuals born year τ\\tau seronegative time tt. Assuming lack maternal antibodies, initial condition cohort can specified Nτ(τ)=1N^{\\tau}(\\tau) = 1. Depending whether FoI constant, time dependent, age dependent, system equations yields different solutions serofoi based .","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"constant-vs-time-varying-foi","dir":"Articles","previous_headings":"","what":"Constant vs Time-varying FoI","title":"An Introduction To Force-of-Infection Models","text":"FoI often incorrectly assumed constant time. Identifying whether FoI follows constant, age-varying time-varying trend can important identification characterization spread disease. serofoi offers tools implement compare wide variety Bayesian models estimate FoI according aforementioned serocatalytic models. idealised situation FoI constant λ(t)=λ\\lambda(t) = \\lambda: dPτ(t)dt=λ(1−Pτ(t)). \\frac{dP^{\\tau}(t)}{dt} = \\lambda (1 - P^{\\tau}(t)).  Applying integrating factor method using initial conditions Xτ(τ)=0X^\\tau(\\tau) = 0 yields solution: Pτ(t)=1−exp(−λ‾t), P^{\\tau}(t) = 1 - \\exp(-\\bar \\lambda t), meaning , long run, seropositivity converges 1. realistic applications, FoI assumed piecewise-constant discrete intervals 1-year length. solution year : Pτ(t)=1+(P0−1)exp(−λtt) P^{\\tau}(t) = 1 + (P_0 - 1) \\exp(-\\lambda_t t)  P0P_0 corresponds seropositivity end previous year λt\\lambda_t constant value assumed FoI time tt. resulting recursive equation, possible obtain analytical solutions seropositivity Pτ(t)P^\\tau(t) along 1-year length chunk.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"considering-seroreversion","dir":"Articles","previous_headings":"","what":"Considering seroreversion","title":"An Introduction To Force-of-Infection Models","text":"Since possible seropositive individuals lose immunity time, consider rate infected individuals become seronegative μ\\mu. system equations now: dPτ(t)dt=λ(t)(1−Pτ(t))−μPτ(t),Pτ(τ)=0, \\begin{aligned}     \\frac{dP^{\\tau}(t)}{dt} &= \\lambda(t) (1 - P^{\\tau}(t)) - \\mu P^{\\tau}(t),\\\\     P^{\\tau}(\\tau) &= 0, \\end{aligned} Similarly, yields iterative solution seropositivity Pτ(t)P^\\tau (t) piece-wise constant FoI considered: Pτ(t)=λtλt+μ+(P0−λtλt+μ)exp(−(λt+μ)),   P^{\\tau}(t)  = \\frac{\\lambda_t}{\\lambda_t + \\mu} + \\left(P_0 - \\frac{\\lambda_t}{\\lambda_t + \\mu}\\right) \\exp(-(\\lambda_t + \\mu)), , , P0P_0 corresponds proportion seropositive individuals cohort τ\\tau end previous year. Correct indexation simplification equation allows description age-dependent FoIs.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"estimating-the-foi---bayesian-modelling","dir":"Articles","previous_headings":"","what":"Estimating the FoI - Bayesian modelling","title":"An Introduction To Force-of-Infection Models","text":"Now can describe proportion seropositive individuals P(t)P(t) means serocatalytic models constant, time-varying, age-varying FoIs, want obtain estimates FoI (λ\\lambda) seroreversion rate (μ\\mu) sampling bye means Bayesian methods taking cross-sectional serological survey data. , can use serofoi’s fit_seromodel(), relies statistical programming language Stan perform task. current available options modelling summarised table 1: Table 1. Available options. , 𝒩\\mathcal{N} corresponds normal distribution, 𝒰\\mathcal{U} uniform distribution, 𝒞\\mathcal{C} Cauchy distribution. number seropositives time survey X()X(), corresponding n_seropositive data, follows binomial distribution: X()∼Binom(n(),PT−(T))   X() \\sim Binom\\left(n(), P^{T - } (T)\\right) n()n() corresponds sample size age group aa (n_sample) TT time serosurvey conducted. Note T−-correspond birth year cohort age aa time survey. prior distributions parameter can selected fit_seromodel(). done means helper functions sf_normal(), `sf_uniform() sf_cauchy(). example: Corresponds model: λ1∼𝒰(0.5,1)σ∼𝒞(0.01,0.005)μ∼𝒩(0.02,0.01) \\begin{align}   \\lambda_1 &\\sim \\mathcal{U}(0.5, 1) \\\\   \\sigma &\\sim \\mathcal{C}(0.01, 0.005) \\\\   \\mu &\\sim \\mathcal{N}(0.02, 0.01) \\end{align}  available options parameter shown table 1. Note , case age- time-varying models, FoI prior can specified first FoI value estimated (.e. birth year oldest age-group time-varying case youngest age-group age-varying case), means subsequent ages/years selected iteratively FoI value estimated previous index.","code":"fit_seromodel(   serosurvey,   model_type = \"time\",   foi_prior = sf_uniform(0.5, 1),   foi_sigma_rw = sf_cauchy(0.01, 0.005),   is_seroreversion = TRUE,   seroreversion_prior = sf_normal(0.02, 0.01) )"},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"model-1--constant-force-of-infection-endemic-model","dir":"Articles","previous_headings":"","what":"Model 1. Constant Force-of-Infection (endemic model)","title":"An Introduction To Force-of-Infection Models","text":"endemic constant model simple mathematical model used epidemiology describe seroprevalence infectious disease within population, product long-term transmission. case, rate infection acquisition λ\\lambda constant time, seroprevalence P()P() behaves cumulative process increasing monotonically age. test constant model simulate serosurvey following stepwise decreasing FoI (red line Fig. 1) using data simulation functions serofoi: simulated dataset serosurvey_constant contains information 250 samples individuals 1 50 years old (5 samples per age) age groups 5 years length. following code shows implement constant model simulated serosurvey: Figure 1. Constant serofoi model plot. Simulated (red) vs modelled (blue) FoI. case, 800 iterations enough ensure convergence. plot_seromodel() returns visualisation results including summary expected log pointwise predictive density (elpd) standard error (se) shown. say model converges R-hat estimates 1.01.","code":"# how the disease circulates foi_df <- data.frame(     year = seq(2000, 2049, 1),     foi = rep(0.02, 50) )  # specify 5-year age bins for observations survey_features <- data.frame(     age_min = seq(1, 50, 5),     age_max = seq(5, 50, 5),     n_sample = rep(25, 10) )  serosurvey_constant <- simulate_serosurvey(   \"time\",   foi_df,   survey_features ) |> mutate(survey_year = 2050) seromodel_constant <- fit_seromodel(   serosurvey = serosurvey_constant,   model_type = \"constant\",   iter = 800 ) plot_seromodel(   seromodel_constant,   serosurvey = serosurvey_constant,   foi_df = foi_df,   size_text = 6 )"},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"time-varying-foi-models","dir":"Articles","previous_headings":"","what":"Time-varying FoI models","title":"An Introduction To Force-of-Infection Models","text":"time-varying FoI models, probability case positive age time tt also follows binomial distribution, described . However, seroprevalence obtained cumulative yearly-varying values FoI time: Pτ(t)=λtλt+μ+(P0−λtλt+μ)exp(−(λt+μ)),   P^{\\tau}(t)  = \\frac{\\lambda_t}{\\lambda_t + \\mu} + \\left(P_0 - \\frac{\\lambda_t}{\\lambda_t + \\mu}\\right) \\exp(-(\\lambda_t + \\mu)),","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"model-2--time-varying-foi---slow-time-varying-foi","dir":"Articles","previous_headings":"","what":"Model 2. Time-varying FoI - Slow Time-Varying FoI","title":"An Introduction To Force-of-Infection Models","text":"time-varying model (model_type = \"time\") uses forward random walk algorithm prior first chronological FoI value time-span serological survey can either normal distribution (foi_prior = sf_normal()) uniform distribution (foi_prior = sf_uniform()). Subsequent values FoI sampled normal distribution λi∼𝒩(λi−1,σ)\\lambda_i \\sim \\mathcal{N}(\\lambda_{-1}, \\sigma), σ∼𝒞(0,1)\\sigma \\sim \\mathcal{C}(0, 1). prior distribution seroreversion rate can also either normal uniform, specified setting is_seroreversion = TRUE means parameter seroreversion_prior. test \"time\" using normal prior FoI, simulate serosurvey following stepwise decreasing FoI (red line Fig. 2) using data simulation functions serofoi: simulated dataset serosurvey_sw_dec contains information 250 samples individuals 1 50 years old (5 samples per age) age groups 5 years length. following code shows implement slow time-varying normal model simulated serological survey: Figure 2. Slow time-varying serofoi model plot. Simulated (red) vs modelled (blue) FoI. number iterations required may depend number years, reflected difference year serosurvey maximum age-class sampled.","code":"foi_df <- data.frame(     year = seq(2000, 2049, 1),     foi = c(       rep(0.2, 25),       rep(0.1, 10),       rep(0.00001, 15)     ) )  survey_features <- data.frame(     age_min = seq(1, 50, 5),     age_max = seq(5, 50, 5),     n_sample = rep(25, 10) )  serosurvey_sw_dec <- simulate_serosurvey(   \"time\",   foi_df,   survey_features ) |> mutate(survey_year = 2050) foi_index <- data.frame(   year = seq(2000, 2049),   foi_index = rep(c(1, 2, 3), c(25, 10, 15)) ) seromodel_time_normal <- fit_seromodel(   serosurvey = serosurvey_sw_dec,   model_type = \"time\",   foi_index = foi_index,   iter = 1500 ) plot_seromodel(   seromodel_time_normal,   serosurvey = serosurvey_sw_dec,   foi_df = foi_df,   size_text = 6 )"},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"model-3--time-varying-foi---fast-epidemic-model","dir":"Articles","previous_headings":"","what":"Model 3. Time-varying FoI - Fast Epidemic Model","title":"An Introduction To Force-of-Infection Models","text":"time-varying fast epidemic model parametrized way initial FoI value forward random walk sampled logarithmic scale. case, priors subsequent FoIs : log(λt)∼𝒩(log(λt−1),σ)σ∼𝒩(0,1) \\begin{aligned}   \\log\\left(\\lambda_t\\right) &\\sim \\mathcal{N}(\\log(\\lambda_{t-1}), \\sigma) \\\\   \\sigma &\\sim \\mathcal{N} (0, 1) \\end{aligned} done order capture fast changes FoI trend. test log_time model simulate serosurvey conducted 2050 emulating hypothetical situation three-year epidemic occurred 2030 2035: simulated serosurvey tests 250 individuals 1 50 years old year 2050. implementation fast epidemic model can obtained running following: Figure 3. Time-varying fast epidemic serofoi model plot. Simulated (red) vs modelled (blue) FoI. Fig 3 can see fast epidemic serofoi model able identify large epidemic simulated simdata_large_epi dataset.","code":"foi_df <- data.frame(     year = seq(2000, 2049, 1),     foi = c(       rep(0, 30),       rep(0.7, 3),       rep(0, 17)     ) )  survey_features <- data.frame(     age_min = seq(1, 50, 5),     age_max = seq(5, 50, 5),     n_sample = rep(25, 10) )  serosurvey_large_epi <- simulate_serosurvey(   survey_features = survey_features,   foi_df,   model = \"time\" ) |> mutate(survey_year = 2050) foi_index <- data.frame(   year = seq(2000, 2049),   foi_index = rep(c(1, 2, 3), c(30, 3, 17)) ) seromodel_log_time_normal <- fit_seromodel(   serosurvey = serosurvey_large_epi,   model_type = \"time\",   is_log_foi = TRUE,   foi_index = foi_index,   iter = 2000 )  plot_log_time_normal <- plot_seromodel(   seromodel_log_time_normal,   serosurvey = serosurvey_large_epi,   foi_df = foi_df,   size_text = 5,   foi_max = 0.7 ) plot(plot_log_time_normal)"},{"path":"https://epiverse-trace.github.io/serofoi/articles/foi_models.html","id":"models-comparison","dir":"Articles","previous_headings":"","what":"Models Comparison","title":"An Introduction To Force-of-Infection Models","text":"showed fast epidemic model (specified model_type = \"time\" is_log = TRUE fit_seromodel()) able identify large epidemic outbreak described dataset simulated according step-wise decreasing FoI (red line Fig 3). Now, like know whether model actually fits dataset better available models serofoi. , also implement endemic model (model_type = \"constant\") slow time-varying normal model (model_type=\"time\", is_log = FALSE): Using function cowplot::plot_grid can visualise results three models simultaneously: Figure 4. Model comparison three serofoi models large-epidemic simulated dataset. common criterion decide model fits data best choose one larger elpd. According criterion, case epidemic fast-epidemic models perform similarly (see second row panels B C Figure 4). NOTE: Running serofoi models first time local computer may take minutes rstan code compile locally. However, initial compilation complete, need local compilation.","code":"cowplot::plot_grid(   plot_constant, plot_time_normal, plot_log_time_normal,   nrow = 1, ncol = 3, labels = \"AUTO\" )"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"An introduction to serofoi","text":"informing public health response want know many individuals infected certain point time, relates level immunity given pathogen population. Based information, possible estimate speed susceptible individuals infected time population. call parameter Force--Infection (FoI). estimate parameter serofoi uses suit catalytic models.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"for-which-diseases-is-this-package","dir":"Articles","previous_headings":"","what":"For which diseases is this package?","title":"An introduction to serofoi","text":"serofoi package designed used infectious disease measure population immunity using IgG antibodies, : arboviruses (dengue, Zika, chikungunya), Chagas, alphaviruses, among many others. However, diseases serofoi may applicable current features. Please check model assumptions case.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"what-is-a-serosurvey","dir":"Articles","previous_headings":"","what":"What is a serosurvey?","title":"An introduction to serofoi","text":"serosurvey epidemiological study involves collection analysis blood samples representative population determine prevalence antibodies specific pathogen. antibodies typically produced immune system response infection, presence blood can serve indicator previous exposure pathogen. Serosurveys valuable tools public health researchers policymakers, provide insights spread infections within communities, proportion individuals immunity, effectiveness vaccination programs. Serosurveys can help guide targeted interventions, inform disease control strategies,evaluate success public health measures.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"what-type-of-serosurvey-data-is-needed-to-use-the-package","dir":"Articles","previous_headings":"","what":"What type of serosurvey data is needed to use the package?","title":"An introduction to serofoi","text":"package designed used serosurveys follow inclusion criteria: population-based cross-sectional surveys (hospital-based). Specify individuals’ age age group. Indicate diagnostic test(s) used. current version serofoi applies IgG antibodies. Identify location date (year) sample collection.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"what-we-assume-about-the-biological-process","dir":"Articles","previous_headings":"","what":"What we assume about the biological process","title":"An introduction to serofoi","text":"Current version serofoi includes following assumptions underlying biological process: seroreversion (positive negative). means IgG antibodies life-long waning immunity. may case several pathogens. inclusion seroreversion modelling process planned future versions serofoi. age-dependency. may case several pathogens. feature planned future versions serofoi. impact migration processes sampled population, means model suited situation high levels migration. differences mortality rate infected versus susceptible individuals. may limitation situations high infection fatality rate, Ebola.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"the-bayesian-statistical-framework","dir":"Articles","previous_headings":"","what":"The Bayesian statistical framework","title":"An introduction to serofoi","text":"assess well mathematical representation different FoI models describes seroprevalence data, implement fitting process relies Bayesian framework. priors upper priors model indicate assumed trajectory FoI (either constant time-varying). serofoi provides set Bayesian comparison methods user choose various possible FoI models (trajectories) best fit seroprevalence data. details see Introduction Force--Infection Models.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/serofoi.html","id":"modelling-the-foi","dir":"Articles","previous_headings":"","what":"Modelling the FoI","title":"An introduction to serofoi","text":"common assume FoI constant time. However always case; serofoi addresses enabling possibility implement different time-varying models FoI offering tools compare constant case order decide model fits serological survey best. integrated dataset chagas2012 provides minimal example input package. following code can used implement visualise basic constant model: Basic constant model visualisation details implementation time-varying models model comparison see FoI Models.","code":"library(serofoi) # Loading and preparing data for modelling data(chagas2012)  # Model implementation model_constant <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"constant\" ) # Visualisation plot_seromodel(   model_constant,   serosurvey = chagas2012,   bin_serosurvey = TRUE,   size_text = 6 )"},{"path":"https://epiverse-trace.github.io/serofoi/articles/simulating_serosurveys.html","id":"constant-foi","dir":"Articles","previous_headings":"","what":"Constant FoI","title":"Simulating Serosurveys","text":"start assuming disease constant Force--Infection (FoI) time.  suppose carry serological survey randomly samples population. simplicity, start, imagine individual one-year group ages sampled sample size age : n=15n=15. put pieces together simulate serosurvey. Either time-varying FoI model age-varying FoI model produce results since equivalent FoI constant. Now, can plot proportions seropositive, including posterior 95% percentiles (assuming flat prior), plot along true seropositivities (line blue):","code":"max_age <- 80 foi_constant <- data.frame(   age = seq(1, max_age, 1),   foi = rep(0.05, max_age) )  ggplot(foi_constant, aes(x = age, y = foi)) +   geom_line() n_sample <- 15 survey_features <- data.frame(   age_min = seq(1, max_age, 1),   age_max = seq(1, max_age, 1),   n_sample = rep(n_sample, max_age)) serosurvey_constant <- simulate_serosurvey(   model = \"age\",   foi = foi_constant,   survey_features = survey_features ) |>   mutate(model_type = \"constant FoI\")  glimpse(serosurvey_constant) #> Rows: 80 #> Columns: 5 #> $ age_min        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … #> $ age_max        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, … #> $ n_sample       <dbl> 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,… #> $ n_seropositive <int> 0, 3, 2, 1, 0, 4, 4, 4, 7, 7, 9, 5, 4, 8, 8, 10, 9, 12,… #> $ model_type     <chr> \"constant FoI\", \"constant FoI\", \"constant FoI\", \"consta… plot_serosurvey(serosurvey_constant) +   geom_line(     data = prob_seroprev_by_age(       model = \"age\",       foi = foi_constant,       seroreversion_rate = 0       ),     aes(x = age, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent)"},{"path":"https://epiverse-trace.github.io/serofoi/articles/simulating_serosurveys.html","id":"age-varying-foi","dir":"Articles","previous_headings":"","what":"Age-varying FoI","title":"Simulating Serosurveys","text":"now consider pathogen FoI varies throughout age individuals. assume FoI declines strongly throughout childhood.  use survey design simulate serological survey. , see FoI age-dependent FoI pathogen increases rapidly earliest years plateaus later adulthood FoI effectively becomes negligible.","code":"ages <- seq(1, max_age, 1) foi_age_varying <- data.frame(   age = ages,   foi = 0.1 * exp(-0.1 * ages) )  ggplot(foi_age_varying, aes(x = age, y = foi)) +   geom_line() serosurvey_age_dep <- simulate_serosurvey(   model = \"age\",   foi = foi_age_varying,   survey_features = survey_features ) |>     mutate(model_type = \"age-dependent FoI\") # combine with constant FoI survey prob_seroprev_constant <- prob_seroprev_by_age(       model = \"age\",       foi = foi_constant,       seroreversion_rate = 0       ) |>       rename(age_min = age)  prob_seroprev_age <- prob_seroprev_by_age(       model = \"age\",       foi = foi_age_varying,       seroreversion_rate = 0       ) |>   rename(age_min = age)  serosurvey_combined <- rbind(   left_join(     serosurvey_constant,     prob_seroprev_constant,     by = \"age_min\"     ),   left_join(     serosurvey_age_dep,     prob_seroprev_age,       by = \"age_min\"       )   )  |>   mutate(model_type = as.factor(model_type))  plot_serosurvey(serosurvey = serosurvey_combined) +   geom_line(     data = serosurvey_combined,     aes(x = age_min, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\") +   facet_wrap(~model_type)"},{"path":"https://epiverse-trace.github.io/serofoi/articles/simulating_serosurveys.html","id":"time-dependent-foi","dir":"Articles","previous_headings":"","what":"Time-dependent FoI","title":"Simulating Serosurveys","text":"now consider pathogen FoI varies calendar time. imagine pathogen ‘spiky’ FoI, characteristic epidemic disease.  serological survey design produces serological profile distinct patterning. , can plot true seropositivities, highlights jumps seropositivity corresponding cohorts born either side epidemics:","code":"foi_spiky <- data.frame(   year = seq(1946, 2025, 1),   foi = c(     rep(0, 10),     rep(0.1, 2),     rep(0, 20),     rep(0.2, 1),     rep(0, 15),     rep(0.1, 2),     rep(0, 30)     ) )  # plot ggplot(foi_spiky, aes(x = year, y = foi)) +   geom_line() serosurvey_spiky <- simulate_serosurvey(   model = \"time\",   foi = foi_spiky,   survey_features = survey_features ) # plot shows jumps in seropositivity plot_serosurvey(serosurvey_spiky) +   geom_line(     data = prob_seroprev_by_age(       model = \"time\",       foi = foi_spiky,       seroreversion_rate = 0       ),     aes(x = age, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\")"},{"path":"https://epiverse-trace.github.io/serofoi/articles/simulating_serosurveys.html","id":"age-and-time-dependent-foi","dir":"Articles","previous_headings":"","what":"Age-and-time-dependent FoI","title":"Simulating Serosurveys","text":"Many pathogens may transmission strength varies according age time. example sexually transmitted disease transmission follows characteristic age-specific pattern, peaking early 20s. , imagine disease relatively recently invaded population. imagine time-specific multiplier FoI follows variation.  create pattern age-structured FoI multipliers peaks early 20s.  create overall FoI (function time age), create product time- age-dependent parts .  now simulate serosurvey assuming historical FoIs generated population-wide seropositivities 2025; make sample sizes larger able clearly visualise patterns seropositivity. also illustrate serosurveys wider age-bins can generated choosing 5-year bins.  compare closely related pathogen exhibits seroreversion – process individuals lose antibody detectability time. Owing seroreversion, pathogen produces seropositivity profile peaks slightly lower level previously.","code":"foi_time <- c(rep(0, 40), rep(1, 40)) foi_df_time <- data.frame(   year = seq(1946, 2025, 1),   foi = foi_time )  # plot ggplot(foi_df_time, aes(x = year, y = foi)) +   geom_line() ages <- seq(1, 80, 1) foi_age <- 2 * dlnorm(   ages, meanlog = 3.5, sdlog = 0.5)  foi_df_age <- data.frame(   age = ages,   foi = foi_age )  # plot ggplot(foi_df_age, aes(x = age, y = foi)) +   geom_line() foi_age_time <- expand.grid(   year = foi_df_time$year,   age = foi_df_age$age ) |>   left_join(foi_df_age, by = \"age\") |>   rename(foi_age = foi) |>   left_join(foi_df_time, by = \"year\") |>   rename(foi_time = foi) |>   mutate(foi = foi_age * foi_time) |>   select(-c(\"foi_age\", \"foi_time\")) max_age <- 80 n_sample <- 50 survey_features <- data.frame(   age_min = seq(1, max_age, 5),   age_max = seq(5, max_age, 5)) |>   mutate(n_sample = rep(n_sample, length(age_min)))  serosurvey <- simulate_serosurvey(   model = \"age-time\",   foi = foi_age_time,   survey_features = survey_features ) |>     mutate(model_type = \"non-seroreverting\") plot_serosurvey(serosurvey) +   geom_line(     data = prob_seroprev_by_age(       model = \"age-time\",       foi = foi_age_time,       seroreversion_rate = 0       ),     aes(x = age, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\") # generate serosurvey for a seroreverting pathogen serosurvey_serorevert <- simulate_serosurvey(   model = \"age-time\",   foi = foi_age_time,   survey_features = survey_features,   seroreversion_rate = 0.01 ) |>     mutate(model_type = \"seroreverting\") # combine with constant FoI survey prob_seroprev_no_serorev <- prob_seroprev_by_age(   model = \"age-time\",   foi = foi_age_time,   seroreversion_rate = 0   ) |>   rename(age_min = age)  prob_seroprev_serorev <- prob_seroprev_by_age(   model = \"age-time\",   foi = foi_age_time,   seroreversion_rate = 0.01   ) |>   rename(age_min = age)  serosurvey_combined <- rbind(   left_join(     serosurvey,     prob_seroprev_no_serorev,     by = \"age_min\"     ),   left_join(     serosurvey_serorevert,     prob_seroprev_serorev,     by = \"age_min\"     )   ) |>   mutate(model_type = as.factor(model_type))  # plot both plot_serosurvey(serosurvey = serosurvey_combined) +   geom_line(     data = serosurvey_combined,     aes(x = age_min, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\") +   facet_wrap(~model_type)"},{"path":"https://epiverse-trace.github.io/serofoi/articles/simulating_serosurveys.html","id":"simulating-from-a-general-serological-model","dir":"Articles","previous_headings":"","what":"Simulating from a general serological model","title":"Simulating Serosurveys","text":"now illustrate example age- time-dependent FoI model representing prevalence HIV (absence treatment). absence treatment, HIV invariably ends death, death usually occurs onset AIDS occurs typically many years infection. means time infection death characteristic waiting time, year model around 10 years long. model considers single susceptible group, Sτ(t)S^{\\tau}(t) indexed birth year, τ\\tau, calendar time, tt. series consecutive seropositive states, Xiτ(t)X_i^{\\tau}(t), ∈[1,10]\\[1,10]; finally dead state, Dτ(t)D^{\\tau}(t). distributing seropositive population across range states, model effectively institutes delay infection death. model takes following form: dSτ(t)dt=−u(t−τ)v(t)Sτ(t)dX1τ(t)dt=u(t−τ)v(t)Sτ(t)−X1τ(t)dXiτ(t)dt=Xi−1τ(t)−Xiτ(t),∀∈[2,10],dDτ(t)dt=X10,\\begin{equation}\\label{eq:serocatalytic_hiv}     \\begin{aligned}         \\frac{dS^{\\tau}(t)}{dt} &= -u(t-\\tau)v(t) S^{\\tau}(t)\\\\         \\frac{dX_1^{\\tau}(t)}{dt} &= u(t-\\tau)v(t) S^{\\tau}(t) - X_1^{\\tau}(t)\\\\         \\frac{dX_i^{\\tau}(t)}{dt} &= X_{-1}^{\\tau}(t) - X_{}^{\\tau}(t), \\quad \\forall \\[2,10],\\\\         \\frac{dD^{\\tau}(t)}{dt} &= X_{10},     \\end{aligned} \\end{equation} Sτ(0)=1S^{\\tau}(0)=1 compartments initial conditions set zero. assume u(.)u(.) v(.)v(.) piecewise-constant one-year pieces, values sexually transmitted disease example . model fit neatly classes serocatalytic models, , generally, produce specific methods foreseeable model structure. possible find general strategy solving models rewriting piecewise-linear systems ordinary differential equations. Since system linear, can write vector differential equation defining 𝐘τ(t):=[Sτ(t),X1τ(t),...,X10τ(t),Dτ(t)]′\\boldsymbol{Y}^{\\tau}(t):=[S^{\\tau}(t),X_1^{\\tau}(t),...,X_{10}^{\\tau}(t),D^{\\tau}(t)]' vector states 𝐀‾t,τ\\bar{\\boldsymbol{}}_{t,\\tau} matrix constants fixed given year year birth: 𝐀‾t,τ:=[−u‾(t−τ)v‾(t)0⋯u‾(t−τ)v‾(t)−10⋯01−10⋯001−10⋯⋮⋮⋱⋱⋱⋱0⋯010].\\begin{equation}     \\bar{\\boldsymbol{}}_{t,\\tau} := \\begin{bmatrix} -\\bar u(t-\\tau) \\bar v(t) & 0 & \\cdots \\\\ \\bar u(t-\\tau) \\bar v(t) & -1 & 0 & \\cdots\\\\ 0 & 1 & -1 & 0 & \\cdots\\\\ 0 & 0 & 1 & -1 & 0 & \\cdots\\\\ \\vdots & \\vdots & \\ddots & \\ddots & \\ddots & \\ddots\\\\ 0 & \\cdots & & 0 & 1 & 0 \\end{bmatrix}. \\end{equation} Using matrix, can write solve system equations: d𝐘τ(t)dt=𝐀‾t,τ𝐘τ(t)⟹𝐘τ(t+1)=exp(𝐀‾t,τ)𝐘τ(t).\\begin{equation}     \\frac{d\\boldsymbol{Y}^{\\tau}(t)}{dt} = \\bar{\\boldsymbol{}}_{t,\\tau} \\boldsymbol{Y}^{\\tau}(t) \\implies \\boldsymbol{Y}^{\\tau}(t+1) = \\exp(\\bar{\\boldsymbol{}}_{t,\\tau}) \\boldsymbol{Y}^{\\tau}(t). \\end{equation} used matrix exponentials find solution individual algebraic expressions unwieldy many compartments. matrix form means general solution system can written follows: 𝐘τ(t)=exp(∑t′=1t𝐀‾t′,τ)𝐘τ(0).\\begin{equation}     \\boldsymbol{Y}^{\\tau}(t) = \\exp\\left(\\sum_{t'=1}^{t}\\bar{\\boldsymbol{}}_{t',\\tau}\\right) \\boldsymbol{Y}^{\\tau}(0). \\end{equation} now illustrate system can solved used simulate serosurvey using serofoi. key writing method constructing matrix 𝐀t′,τ\\boldsymbol{}_{t',\\tau} expression.  can also simulate serosurvey assuming model.","code":"# use same age- and time-specific multipliers u <- foi_df_age$foi v <- foi_df_time$foi  # function to construct A matrix for one piece construct_A <- function(t, tau, u, v) {   u_bar <- u[t - tau]   v_bar <- v[t]    A <- diag(-1, ncol = 12, nrow = 12)   A[row(A) == (col(A) + 1)] <- 1   A[1, 1] <- -u_bar * v_bar   A[2, 1] <- u_bar * v_bar   A[12, 12] <- 0    A }  # determines the sum of seropositive compartments of those still alive calculate_seropositivity_fn <- function(Y) {   sum(Y[2:11]) / (1 - Y[12]) }  # initial conditions in 12D state vector initial_conditions <- rep(0, 12) initial_conditions[1] <- 1  # solve seropositive_hiv <- prob_seroprev_gen_by_age(     construct_A,     calculate_seropositivity_fn,     initial_conditions,     max_age = 80,     u,     v   )  ggplot(seropositive_hiv, aes(x = age, y = seropositivity)) +   geom_line() +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\") serosurvey <- simulate_serosurvey_general(     construct_A,     calculate_seropositivity_fn,     initial_conditions,     survey_features,     u,     v ) # plot plot_serosurvey(serosurvey) +   geom_line(     data = seropositive_hiv,     aes(x = age, y = seropositivity),     color = \"blue\",     linewidth = 1   ) +   scale_y_continuous(labels = scales::percent) +   ylab(\"Seropositivity\") +   xlab(\"Age\")"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-challenge","dir":"Articles","previous_headings":"Case study 1: Chikungunya (a fast-spreading epidemic scenario)","what":"The challenge:","title":"Real-Life Use Cases For Serofoi","text":"Chikungunya viral disease first described outbreak Tanzania 1952. several decades, primarily found Africa Asia. However, 2004, first Chikungunya outbreak outside regions occurred island Réunion Indian Ocean. Since , Chikungunya spread rapidly throughout world, including Americas, Europe, Pacific region. 2013, first cases Chikungunya reported Americas, virus since become endemic several countries Latin America. transmission Chikungunya primarily bites infected Aedes mosquitoes, humans serving primary amplifying host. symptoms Chikungunya include fever, joint pain, headache, muscle pain, rash, disease can range mild severe. Although Chikungunya typically fatal, can cause significant morbidity potential cause large-scale outbreaks, making important public health concern. methodological challenge best estimate disease burden untangling endemic epidemic patterns several locations around world. serofoi can assist estimates.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-dataset","dir":"Articles","previous_headings":"Case study 1: Chikungunya (a fast-spreading epidemic scenario)","what":"The dataset:","title":"Real-Life Use Cases For Serofoi","text":"gain insights transmission dynamics Chikungunya Americas, used dataset population-based study conducted Bahia, Brazil October-December 2015. study, conducted Dias et al. (2018), involved household interviews age-disaggregated serological surveys measure IgG antibodies Chikungunya virus. survey conducted immediately large Chikungunya epidemic area.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-results","dir":"Articles","previous_headings":"Case study 1: Chikungunya (a fast-spreading epidemic scenario)","what":"The results:","title":"Real-Life Use Cases For Serofoi","text":"serofoi used compare three potential scenarios Chikungunya transmission: constant endemic, epidemic slow, epidemic fast. Figure 3 displays comparison three serofoi models. results reveal strong statistical support model 3 (fast epidemic model) suggesting sudden increase transmission Chikungunya close year serosurvey (2015). exact year difficult estimate due large level aggregation data, divided 20-year age groups. Nevertheless, results consistent empirical evidence Dias et al. (2018), used interviews IgM testing show similar increase transmission period. Figure 1. Constant time-varying serocatalytic models implementation Chikungunya virus transmission urban remote area Brazil.","code":"# Load and prepare data data(\"chik2015\")  # Implementation of the models seromodel_constant <- fit_seromodel(   serosurvey = chik2015,   model_type = \"constant\",   iter = 1000 )  foi_index <- get_foi_index(chik2015, group_size = 5, model_type = \"time\") seromodel_time <- fit_seromodel(   serosurvey = chik2015,   model_type = \"time\",   foi_prior = sf_normal(0, 0.01),   foi_index = foi_index,   iter = 2500 )  foi_index <- get_foi_index(chik2015, group_size = 5, model_type = \"time\") seromodel_log_time <- fit_seromodel(   serosurvey = chik2015,   model_type = \"time\",   foi_prior = sf_normal(0, 0.01),   is_log_foi = TRUE,   foi_index = foi_index,   iter = 2000 )  # Visualisation of the results plot_constant <- plot_seromodel(   seromodel = seromodel_constant,   serosurvey = chik2015,   foi_max = 0.07,   size_text = 6 ) plot_time <- plot_seromodel(   seromodel = seromodel_time,   serosurvey = chik2015,   foi_max = 0.07,   size_text = 6 ) plot_log_time <- plot_seromodel(   seromodel = seromodel_log_time,   serosurvey = chik2015,   foi_max = 0.07,   size_text = 6 )  cowplot::plot_grid(plot_constant, plot_time, plot_log_time, ncol = 3)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-challenge-1","dir":"Articles","previous_headings":"Case study 2. Hidden Alphaviruses epidemics in Panama","what":"The challenge:","title":"Real-Life Use Cases For Serofoi","text":"emerging alphaviruses, including Venezuelan Equine Encephalitis Virus (VEEV), RNA viruses can cause disease humans animals. primarily transmitted mosquitoes complex transmission cycle involves human non-human hosts, including birds mammals. Alphaviruses can cause significant morbidity mortality. Hidden epidemics endemic transmission alphaviruses occurring small remote communities Eastern Panama decades without major notice [@carrera2020]. main concern alphaviruses potential spill human populations reach highly populated cities urban areas humans susceptible. Darien province Eastern Panama, bordering north Colombia south Pacific Ocean, home several indigenous communities live traditional remote villages. Notably, area also critical crossing point illegal immigration Africa South America north Americas. Estimating temporal trends incidence alphaviruses region methodological challenge critical inform control strategies. serofoi can assist estimations.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-dataset-1","dir":"Articles","previous_headings":"Case study 2. Hidden Alphaviruses epidemics in Panama","what":"The dataset:","title":"Real-Life Use Cases For Serofoi","text":"[@carrera2020], use dataset measuring IgG antibodies VEEV rural village Panamá 2012. VEEV primarily transmitted mosquitoes can cause disease horses humans. dataset, veev2012 included serofoi.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-result","dir":"Articles","previous_headings":"Case study 2. Hidden Alphaviruses epidemics in Panama","what":"The result:","title":"Real-Life Use Cases For Serofoi","text":"serofoi used compare three potential scenarios VEEV transmission: constant endemic, epidemic slow, epidemic fast. results showed significant increase estimated FoI region, indicating rise VEEV transmission. study found much higher statistical support time-varying rather constant scenario based higher elpd lower se values two time-varying models compared constant one (Figure 2). results also suggest slightly (yet relevant) better support model 3 (log-time), compared model 2 (time), suggesting recent increase transmission study area. Figure 2. Constant time-varying serocatalytic models implementation VEEV transmission rural remote area Panama.","code":"# Load and prepare data data(\"veev2012\")  # Implementation of the models seromodel_constant <- fit_seromodel(   serosurvey = veev2012,   model_type = \"constant\",   iter = 1000 )  foi_index <- get_foi_index(veev2012, group_size = 5, model_type = \"time\") seromodel_time <- fit_seromodel(   serosurvey = veev2012,   model_type = \"time\",   foi_prior = sf_normal(0, 0.1),   foi_index = foi_index,   iter = 2000 )  foi_index <- get_foi_index(veev2012, group_size = 5, model_type = \"time\") seromodel_log_time <- fit_seromodel(   serosurvey = veev2012,   model_type = \"time\",   foi_prior = sf_normal(0, 0.1),   is_log_foi = TRUE,   foi_index = foi_index,   iter = 2000 )  # Visualisation of the results plot_constant <- plot_seromodel(   seromodel = seromodel_constant,   serosurvey = veev2012,   foi_max = 0.35,   size_text = 6 ) plot_time <- plot_seromodel(   seromodel = seromodel_time,   serosurvey = veev2012,   foi_max = 0.35,   size_text = 6 ) plot_log_time <- plot_seromodel(   seromodel = seromodel_log_time,   serosurvey = veev2012,   foi_max = 0.35,   size_text = 6 )  cowplot::plot_grid(plot_constant, plot_time, plot_log_time, ncol = 3)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-challenge-2","dir":"Articles","previous_headings":"Case study 3. Chagas disease (endemic disease)","what":"The challenge:","title":"Real-Life Use Cases For Serofoi","text":"Chagas disease parasitic infection caused protozoan Trypanosoma cruzi. endemic Latin America, transmitted humans bite infected triatomine bugs, present Americas thousands years. Triatomine bugs established domiciliary habits, living inside houses biting humans. Insecticide spraying primary control strategy Chagas disease, effectively reduces population triatomine bugs, main vector disease, domestic environments. According [@cucunubá2017], interventions Chagas disease control ongoing Colombia since 1980s, heterogeneous impact depending type setting, environment, population. methodological challenge best estimate historical effectiveness control strategies across endemic areas. serofoi can assist estimations.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/articles/use_cases.html","id":"the-dataset-2","dir":"Articles","previous_headings":"Case study 3. Chagas disease (endemic disease)","what":"The dataset","title":"Real-Life Use Cases For Serofoi","text":"Based data analysis shown [@cucunubá2017], use one datasets measure seroprevalence IgG antibodies Trypanosoma cruzi infection rural areas Colombia. dataset part serofoi package chagas2012. dataset corresponds serosurvey conducted 2012 rural indigenous community known long-term endemic transmission, control interventions taken place years. ### result Chagas endemic disease, use serofoi endemic models (1. constant, 2. tv-normal) chagas2012 dataset compare model better supported. results shown Figure 3. found serosurvey, serofoi models converged (based R-hat values crossing 1.01), comparison two models shows relevant slow decreasing trend, consistent model 2 - tv-normal. model statistically better supported based highest elpd lowest se values compared constant model. results suggest slow, still relevant decrease FoI values last decades may consequence interventions local environmental changes occurred study area years, point (2012) serosurvey conducted. Figure 3. Endemic models implementation Trypanosoma cruzi rural area Colombia.","code":"# Load and prepare data data(\"chagas2012\")  # Implementation of the models seromodel_constant <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"constant\",   iter = 800 )  foi_index <- get_foi_index(chagas2012, group_size = 10, model_type = \"time\") seromodel_time <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"time\",   foi_index = foi_index,   iter = 1500 )  # Visualisation of the results plot_constant <- plot_seromodel(   seromodel = seromodel_constant,   serosurvey = chagas2012,   bin_serosurvey = TRUE,   bin_step = 10,   size_text = 6 ) plot_time <- plot_seromodel(   seromodel = seromodel_time,   serosurvey = chagas2012,   bin_serosurvey = TRUE,   bin_step = 10,   size_text = 6 ) cowplot::plot_grid(plot_constant, plot_time, ncol = 2)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zulma M. Cucunubá. Author, maintainer. Nicolás T. Domínguez. Author. Ben Lambert. Author. Pierre Nouvellet. Author. Geraldine Gómez. Contributor. Jaime . Pavlich-Mariscal. Contributor. Hugo Gruson. Contributor. David Santiago Quevedo. Contributor. Miguel Gámez. Contributor. Sumali Bajaj. Contributor. Everlyn Kamau. Contributor. Richard Creswell. Contributor. International Development Research Center (IDRC). Funder. Pontificia Universidad Javeriana. Copyright holder.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cucunubá Z, T. Domínguez N, Lambert B, Nouvellet P (2025). serofoi: Bayesian Estimation Force Infection Serological Data. R package version 1.0.3, https://epiverse-trace.github.io/serofoi/, https://github.com/epiverse-trace/serofoi.","code":"@Manual{,   title = {serofoi: Bayesian Estimation of the Force of Infection from Serological Data},   author = {Zulma M. Cucunubá and Nicolás {T. Domínguez} and Ben Lambert and Pierre Nouvellet},   year = {2025},   note = {R package version 1.0.3,     https://epiverse-trace.github.io/serofoi/},   url = {https://github.com/epiverse-trace/serofoi}, }"},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"serofoi-force-of-infection-from-population-based-serosurveys-with-age-disaggregated-data-","dir":"","previous_headings":"","what":"serofoi: force-of-infection from population based serosurveys with age-disaggregated data","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"serofoi R package estimate Force--Infection (FoI) given pathogen age-disaggregated population-based cross-sectional serosurveys, using Bayesian framework. package provides set features assessing model fitting, convergence visualisation. serofoi relies rstan package, provides R interface Stan programming language statistical Bayesian modelling. Particularly, serofoi relies use Hamiltonian Monte Carlo (HMC) algorithm implemented Stan Markov chain Monte Carlo (MCMC) sampling. implemented methods outlined (Cucunubá et al. 2017) (Carrera et al. 2020) (see FoI Models details). compelling mathematical treatment implemented serocatalytic models can found (Kamau et al. 2025). serofoi part Epiverse Initiative.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"can install serofoi CRAN using: can install development version serofoi GitHub running: :","code":"install.packages(\"serofoi\") if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/serofoi\") if(!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"epiverse-trace/serofoi\")"},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"serofoi provides minimal serosurvey datasets can used test package. instance, dataset chagas2012 contains seroprevalence measures IgG antibodies Trypanosoma cruzi infection corresponding serological survey conducted Colombia 2012 rural indigenous community known present long-term endemic transmission visualisation serological data can obtained using function plot_serosurvey: Seroprevalence plot chagas2012 dataset. , error bars correspond binomial confidence interval point size represents sample size age group. constant FoI model can easily implemented means fit_seromodel: details visualise results available models, please refer online documentation.","code":"# Load example dataset chagas2012 included with the package data(chagas2012) head(chagas2012, 5) #>   survey_year n_sample n_seropositive age_min age_max #> 1        2012       34              0       1       1 #> 2        2012       25              0       2       2 #> 3        2012       35              1       3       3 #> 4        2012       29              0       4       4 #> 5        2012       36              0       5       5 plot_serosurvey(chagas2012, bin_serosurvey = TRUE, size_text = 15) seromodel <- fit_seromodel(serosurvey = chagas2012)"},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"contributions","dir":"","previous_headings":"Quick start","what":"Contributions","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"Contributors project include: Zulma M. Cucunubá (author, maintainer) Nicolás Torres (author) Ben Lambert (author) Pierre Nouvellet (author) Geraldine Gómez (contributor) Jaime . Pavlich-Mariscal (contributor) Miguel Gamez (contributor) Hugo Gruson (contributor) David Santiago Quevedo (contributor) Everlyn Kamau (contributor) Richard Creswell (contributor) Sumali Bajaj (contributor)","code":""},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"package-vignettes","dir":"","previous_headings":"","what":"Package vignettes","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"details use serofoi can found online documentation package vignettes, “Articles”.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"report bug please open issue.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"Contributions serofoi welcomed. Please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Bayesian Estimation of the Force of Infection from Serological Data","text":"Please note serofoi project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/reference/add_age_group_to_serosurvey.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds age group marker to serosurvey — add_age_group_to_serosurvey","title":"Adds age group marker to serosurvey — add_age_group_to_serosurvey","text":"Adds age group marker serosurvey","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/add_age_group_to_serosurvey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds age group marker to serosurvey — add_age_group_to_serosurvey","text":"","code":"add_age_group_to_serosurvey(serosurvey)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/add_age_group_to_serosurvey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds age group marker to serosurvey — add_age_group_to_serosurvey","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/add_age_group_to_serosurvey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds age group marker to serosurvey — add_age_group_to_serosurvey","text":"serosurvey additional column specifying age group marker defined mean floor age_min age_max","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/build_stan_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds stan data for sampling depending on the selected model — build_stan_data","title":"Builds stan data for sampling depending on the selected model — build_stan_data","text":"Builds stan data sampling depending selected model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/build_stan_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds stan data for sampling depending on the selected model — build_stan_data","text":"","code":"build_stan_data(   serosurvey,   model_type = \"constant\",   foi_prior = sf_uniform(),   foi_index = NULL,   is_log_foi = FALSE,   foi_sigma_rw = sf_none(),   is_seroreversion = FALSE,   seroreversion_prior = sf_none() )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/build_stan_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds stan data for sampling depending on the selected model — build_stan_data","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group model_type Type model. Either \"constant\", \"age\" \"time\" foi_prior Force--infection distribution specified means helper functions. Currently available options : sf_normal Function set normal distribution priors sf_uniform Function set uniform distribution priors foi_index Integer vector specifying age-groups Force--Infection values estimated. can specified means get_foi_index is_log_foi Boolean set logarithmic scale FoI foi_sigma_rw Prior distribution standard deviation Force--Infection. Currently available options : sf_normal Function set normal distribution prior. Available time models log-scale sf_cauchy Function set Cauchy distribution prior. Available time models regular scale. is_seroreversion Boolean specifying whether include seroreversion rate estimation model seroreversion_prior seroreversion distribution specified means helper functions. Currently available options : sf_normal Function set normal distribution priors sf_uniform Function set uniform distribution priors sf_none Function set prior distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/build_stan_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds stan data for sampling depending on the selected model — build_stan_data","text":"List necessary data sampling specified model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chagas2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Chagas seroprevalence data in serofoi — chagas2012","title":"Chagas seroprevalence data in serofoi — chagas2012","text":"Datasets measure seroprevalence IgG antibodies Trypanosoma cruzi infection rural areas Colombia corresponding serosurvey conducted 2012 rural indigenous community known long-term endemic transmission, control interventions taken place years.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chagas2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chagas seroprevalence data in serofoi — chagas2012","text":"","code":"data(chagas2012)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/reference/chagas2012.html","id":"chagas-","dir":"Reference","previous_headings":"","what":"chagas2012","title":"Chagas seroprevalence data in serofoi — chagas2012","text":"<data.frame> 4 rows 5 columns: survey_year Year serosurvey conducted n_sample Number collected samples per age group n_seropositive Number positive samples per age group age_min Age group minimal age age_max Age group maximal age","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chagas2012.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chagas seroprevalence data in serofoi — chagas2012","text":"","code":"data(chagas2012)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/check_age_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Check min and max age consistency for validation purposes — check_age_constraints","title":"Check min and max age consistency for validation purposes — check_age_constraints","text":"Check min max age consistency validation purposes","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/check_age_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check min and max age consistency for validation purposes — check_age_constraints","text":"","code":"check_age_constraints(df)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/check_age_constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check min and max age consistency for validation purposes — check_age_constraints","text":"Boolean checking consistency","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chik2015.html","id":null,"dir":"Reference","previous_headings":"","what":"Chikungunya seroprevalence data in serofoi — chik2015","title":"Chikungunya seroprevalence data in serofoi — chik2015","text":"Datasets measure seroprevalence IgG antibodies Chikungunya virus conducted Bahia, Brazil October-December 2015 Dias et al. (2018). survey conducted immediately large Chikungunya epidemic area.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chik2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chikungunya seroprevalence data in serofoi — chik2015","text":"","code":"data(chik2015)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/reference/chik2015.html","id":"chik-","dir":"Reference","previous_headings":"","what":"chik2015","title":"Chikungunya seroprevalence data in serofoi — chik2015","text":"<data.frame> 4 rows 5 columns: survey_year Year serosurvey conducted n_sample Number collected samples per age group n_seropositive Number positive samples per age group age_min Age group minimal age age_max Age group maximal age","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/chik2015.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chikungunya seroprevalence data in serofoi — chik2015","text":"","code":"data(chik2015)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/extract_central_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","title":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","text":"Extracts central estimates stan_fit object specified parameter","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/extract_central_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","text":"","code":"extract_central_estimates(   seromodel,   serosurvey,   alpha = 0.05,   par_name = \"foi_vector\" )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/extract_central_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used par_name String specifying parameter extracted seromodel","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/extract_central_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","text":"dataframe following columns median Median samples computed 0.5 quantile lower Lower quantile alpha upper Upper quantile 1 - alpha","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/extract_central_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts central estimates from stan_fit object for specified parameter — extract_central_estimates","text":"","code":"data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Gradient evaluation took 2.5e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.25 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.005 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3: Rejecting initial value: #> Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 3:   Stan can't start sampling from this initial value. #> Chain 3: Rejecting initial value: #> Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 3:   Stan can't start sampling from this initial value. #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.004 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.006 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess central_estimates <- extract_central_estimates(   seromodel,   veev2012,   par_name = \"foi\" )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/fit_seromodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","title":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","text":"Runs specified stan model Force--Infection (FoI)","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/fit_seromodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","text":"","code":"fit_seromodel(   serosurvey,   model_type = \"constant\",   is_log_foi = FALSE,   foi_prior = sf_normal(),   foi_sigma_rw = sf_none(),   foi_index = NULL,   foi_init = NULL,   is_seroreversion = FALSE,   seroreversion_prior = sf_normal(),   ... )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/fit_seromodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group model_type Type model. Either \"constant\", \"age\" \"time\" is_log_foi Boolean set logarithmic scale FoI foi_prior Force--infection distribution specified means helper functions. Currently available options : sf_normal Function set normal distribution priors sf_uniform Function set uniform distribution priors foi_sigma_rw Prior distribution standard deviation Force--Infection. Currently available options : sf_normal Function set normal distribution prior. Available time models log-scale sf_cauchy Function set Cauchy distribution prior. Available time models regular scale. foi_index Integer vector specifying age-groups Force--Infection values estimated. can specified means get_foi_index foi_init Initialization function sampling. null, default chosen depending foi-scale model is_seroreversion Boolean specifying whether include seroreversion rate estimation model seroreversion_prior seroreversion distribution specified means helper functions. Currently available options : sf_normal Function set normal distribution priors sf_uniform Function set uniform distribution priors sf_none Function set prior distribution ... Additional parameters rstan","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/fit_seromodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","text":"stan_fit object Force--Infection seroreversion (applicable) samples","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/fit_seromodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs specified stan model for the Force-of-Infection (FoI) — fit_seromodel","text":"","code":"# \\donttest{ data(chagas2012) seromodel <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"time\",   foi_index = data.frame(     year = 1935:2011,     foi_index = c(rep(1, 46), rep(2, 31))   ),   iter = 100 ) #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000614 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 6.14 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.276 seconds (Warm-up) #> Chain 1:                0.25 seconds (Sampling) #> Chain 1:                0.526 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000404 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.04 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.321 seconds (Warm-up) #> Chain 2:                0.327 seconds (Sampling) #> Chain 2:                0.648 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 0.000397 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3.97 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.353 seconds (Warm-up) #> Chain 3:                0.335 seconds (Sampling) #> Chain 3:                0.688 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 0.000406 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 4.06 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.212 seconds (Warm-up) #> Chain 4:                0.29 seconds (Sampling) #> Chain 4:                0.502 seconds (Total) #> Chain 4:  #> Warning: The largest R-hat is 1.06, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess # }"},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_foi_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","title":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","text":"Generates list integers indexing together time/age intervals FoI values estimated fit_seromodel. max value foi_index  corresponds number FoI values estimated sampling. serofoi approach fitting serological data currently supposes FoI piecewise-constant across either groups years ages, function creates Data Frame communicates grouping Stan model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_foi_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","text":"","code":"get_foi_index(serosurvey, group_size, model_type)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_foi_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group group_size Age groups size model_type Type model. Either \"age\" \"time\"","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_foi_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","text":"Data Frame describes grouping years ages (dependent model) pieces within FoI assumed constant performing model fitting. single FoI value estimated ages/years assigned index","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_foi_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates Force-of-Infection indexes for heterogeneous age groups — get_foi_index","text":"","code":"data(chagas2012) foi_index <- get_foi_index(chagas2012, group_size = 25, model_type = \"time\")"},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_seroprev_counts_by_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate seropositivity counts by bin given the probability and sample size per age group bin — get_seroprev_counts_by_bin","title":"Generate seropositivity counts by bin given the probability and sample size per age group bin — get_seroprev_counts_by_bin","text":"Generate seropositivity counts bin given probability sample size per age group bin","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_seroprev_counts_by_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate seropositivity counts by bin given the probability and sample size per age group bin — get_seroprev_counts_by_bin","text":"","code":"get_seroprev_counts_by_bin(   prob_seroprev_by_age,   sample_size_by_age_random,   survey_features )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/get_seroprev_counts_by_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate seropositivity counts by bin given the probability and sample size per age group bin — get_seroprev_counts_by_bin","text":"prob_seroprev_by_age Probability seropositivity age sample_size_by_age_random Random sample size age survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ).","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_foi_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots Force-of-Infection central estimates — plot_foi_estimates","title":"Plots Force-of-Infection central estimates — plot_foi_estimates","text":"Plots Force--Infection central estimates","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_foi_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots Force-of-Infection central estimates — plot_foi_estimates","text":"","code":"plot_foi_estimates(   seromodel,   serosurvey,   alpha = 0.05,   foi_df = NULL,   foi_max = NULL,   size_text = 11,   plot_constant = FALSE,   x_axis = NA )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_foi_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots Force-of-Infection central estimates — plot_foi_estimates","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used foi_df Dataframe columns year/age Year/Age (depending model) foi Force--infection values year/age foi_max Max FoI value plotting size_text Size text plotting (base_size ggplot2) plot_constant boolean specifying whether plot single Force--Infection estimate corresponding rhat value instead showing information summary. relevant seromodel@model_name == \"constant\") x_axis either \"time\" \"age\". Specifies time axis values label constant model additional plots. relevant seromodel@model_name == \"constant\"","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_foi_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots Force-of-Infection central estimates — plot_foi_estimates","text":"ggplot object estimated FoI","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_foi_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots Force-of-Infection central estimates — plot_foi_estimates","text":"","code":"# \\donttest{ data(chagas2012) seromodel <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"time\",   foi_index = data.frame(     year = 1935:2011,     foi_index = c(rep(1, 46), rep(2, 31))   ),   iter = 100,   chains = 2 ) #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000392 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.92 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.284 seconds (Warm-up) #> Chain 1:                0.293 seconds (Sampling) #> Chain 1:                0.577 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000402 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.02 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.249 seconds (Warm-up) #> Chain 2:                0.299 seconds (Sampling) #> Chain 2:                0.548 seconds (Total) #> Chain 2:  #> Warning: The largest R-hat is 1.13, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plot_foi_estimates(seromodel, chagas2012)  # }"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_rhats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot r-hats convergence criteria for the specified model — plot_rhats","title":"Plot r-hats convergence criteria for the specified model — plot_rhats","text":"Plot r-hats convergence criteria specified model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_rhats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot r-hats convergence criteria for the specified model — plot_rhats","text":"","code":"plot_rhats(   seromodel,   serosurvey,   size_text = 11,   plot_constant = FALSE,   x_axis = NA )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_rhats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot r-hats convergence criteria for the specified model — plot_rhats","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group size_text Size text plotting (base_size ggplot2) plot_constant boolean specifying whether plot single Force--Infection estimate corresponding rhat value instead showing information summary. relevant seromodel@model_name == \"constant\") x_axis either \"time\" \"age\". Specifies time axis values label constant model additional plots. relevant seromodel@model_name == \"constant\"","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_rhats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot r-hats convergence criteria for the specified model — plot_rhats","text":"ggplot object showing r-hats model compared convergence criteria (horizontal dashed line)","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_rhats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot r-hats convergence criteria for the specified model — plot_rhats","text":"","code":"# \\donttest{ data(chagas2012) seromodel <- fit_seromodel(   serosurvey = chagas2012,   model_type = \"time\",   foi_index = data.frame(     year = 1935:2011,     foi_index = c(rep(1, 46), rep(2, 31))   ),   iter = 100,   chains = 2 ) #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 0.000406 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.06 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.283 seconds (Warm-up) #> Chain 1:                0.21 seconds (Sampling) #> Chain 1:                0.493 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'time_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 0.000423 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 4.23 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.244 seconds (Warm-up) #> Chain 2:                0.329 seconds (Sampling) #> Chain 2:                0.573 seconds (Total) #> Chain 2:  #> Warning: The largest R-hat is 1.36, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plot_rhats(seromodel, chagas2012)  # }"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seromodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise results of the provided model — plot_seromodel","title":"Visualise results of the provided model — plot_seromodel","text":"Visualise results provided model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seromodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise results of the provided model — plot_seromodel","text":"","code":"plot_seromodel(   seromodel,   serosurvey,   alpha = 0.05,   bin_serosurvey = FALSE,   bin_step = 5,   foi_df = NULL,   foi_max = NULL,   loo_estimate_digits = 1,   central_estimate_digits = 2,   seroreversion_digits = 2,   rhat_digits = 2,   size_text = 11,   plot_constant = FALSE,   x_axis = NA )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seromodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise results of the provided model — plot_seromodel","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used bin_serosurvey TRUE, serodata binned means prepare_bin_serosurvey. Otherwise, age groups kept originally input. bin_step Integer specifying age groups bin size used bin_serosurvey set TRUE. foi_df Dataframe columns year/age Year/Age (depending model) foi Force--infection values year/age foi_max Max FoI value plotting loo_estimate_digits Number loo estimate digits central_estimate_digits Number central estimate digits seroreversion_digits Number seroreversion rate digits rhat_digits Number rhat estimate digits size_text Size text plotting (base_size ggplot2) plot_constant boolean specifying whether plot single Force--Infection estimate corresponding rhat value instead showing information summary. relevant seromodel@model_name == \"constant\") x_axis either \"time\" \"age\". Specifies time axis values label constant model additional plots. relevant seromodel@model_name == \"constant\"","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seromodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise results of the provided model — plot_seromodel","text":"seromodel summary plot","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seromodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise results of the provided model — plot_seromodel","text":"","code":"# \\donttest{ data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Gradient evaluation took 1.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.4e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.14 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.002 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.004 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.004 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.006 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plot_seromodel(seromodel, veev2012) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details.  # }"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seroprev_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","title":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","text":"Plot seroprevalence estimates top serosurvey","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seroprev_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","text":"","code":"plot_seroprev_estimates(   seromodel,   serosurvey,   alpha = 0.05,   size_text = 11,   bin_serosurvey = FALSE,   bin_step = 5 )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seroprev_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used size_text Size text plotting (base_size ggplot2) bin_serosurvey TRUE, serodata binned means prepare_bin_serosurvey. Otherwise, age groups kept originally input. bin_step Integer specifying age groups bin size used bin_serosurvey set TRUE.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seroprev_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","text":"ggplot object seroprevalence estimates serosurveys plots","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_seroprev_estimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot seroprevalence estimates on top of the serosurvey — plot_seroprev_estimates","text":"","code":"data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Gradient evaluation took 1.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.16 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.005 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.005 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: The largest R-hat is 1.08, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plot_seroprev_estimates(seromodel, veev2012)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_serosurvey.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots seroprevalence from the given serosurvey — plot_serosurvey","title":"Plots seroprevalence from the given serosurvey — plot_serosurvey","text":"Plots seroprevalence given serosurvey","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_serosurvey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots seroprevalence from the given serosurvey — plot_serosurvey","text":"","code":"plot_serosurvey(   serosurvey,   size_text = 11,   bin_serosurvey = FALSE,   bin_step = 5 )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_serosurvey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots seroprevalence from the given serosurvey — plot_serosurvey","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group size_text Size text plotting (base_size ggplot2) bin_serosurvey TRUE, serodata binned means prepare_bin_serosurvey. Otherwise, age groups kept originally input. bin_step Integer specifying age groups bin size used bin_serosurvey set TRUE.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_serosurvey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots seroprevalence from the given serosurvey — plot_serosurvey","text":"ggplot object seroprevalence plot","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_serosurvey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots seroprevalence from the given serosurvey — plot_serosurvey","text":"","code":"# Chikungunya example serosurvey data(chik2015) plot_serosurvey(chik2015)   # VEEV example serosurvey data(veev2012) plot_serosurvey(veev2012)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots model summary — plot_summary","title":"Plots model summary — plot_summary","text":"Plots model summary","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots model summary — plot_summary","text":"","code":"plot_summary(   seromodel,   serosurvey,   loo_estimate_digits = 1,   central_estimate_digits = 2,   rhat_digits = 2,   size_text = 11,   plot_constant = FALSE )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots model summary — plot_summary","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group loo_estimate_digits Number loo estimate digits central_estimate_digits Number central estimate digits rhat_digits Number rhat estimate digits size_text Size text plotting (base_size ggplot2) plot_constant boolean specifying whether plot single Force--Infection estimate corresponding rhat value instead showing information summary. relevant seromodel@model_name == \"constant\")","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots model summary — plot_summary","text":"ggplot object summary specified model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/plot_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots model summary — plot_summary","text":"","code":"# \\donttest{ data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.16 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.004 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.006 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.005 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3: Rejecting initial value: #> Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 3:   Stan can't start sampling from this initial value. #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.005 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess plot_summary(seromodel, veev2012) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details.  # }"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prepare_serosurvey_for_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares serosurvey for plotting — prepare_serosurvey_for_plot","title":"Prepares serosurvey for plotting — prepare_serosurvey_for_plot","text":"Adds seroprevalence values corresponding binomial confidence interval","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prepare_serosurvey_for_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares serosurvey for plotting — prepare_serosurvey_for_plot","text":"","code":"prepare_serosurvey_for_plot(serosurvey, alpha = 0.05)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prepare_serosurvey_for_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares serosurvey for plotting — prepare_serosurvey_for_plot","text":"serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates confidence level used","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prepare_serosurvey_for_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares serosurvey for plotting — prepare_serosurvey_for_plot","text":"serosurvey additional columns: seroprev Seroprevalence computed proportion positive cases n_seropositive number samples n_sample age group seroprev_lower Lower limit binomial confidence interval seroprev seroprev_upper Upper limit binomial confidence interval seroprev","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_by_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probabilities of seropositivity by age based on an age-varying Force-of-Infection (FoI) model. — prob_seroprev_age_by_age","title":"Generate probabilities of seropositivity by age based on an age-varying Force-of-Infection (FoI) model. — prob_seroprev_age_by_age","text":"function calculates probabilities seropositivity age based age-varying FoI model. takes account FoI rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_by_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probabilities of seropositivity by age based on an age-varying Force-of-Infection (FoI) model. — prob_seroprev_age_by_age","text":"","code":"prob_seroprev_age_by_age(foi, seroreversion_rate)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_by_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probabilities of seropositivity by age based on an age-varying Force-of-Infection (FoI) model. — prob_seroprev_age_by_age","text":"foi dataframe containing FoI values different ages. two columns: 'age' 'foi'. seroreversion_rate non-negative numeric value representing rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_by_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probabilities of seropositivity by age based on an age-varying Force-of-Infection (FoI) model. — prob_seroprev_age_by_age","text":"dataframe columns 'age' 'seropositivity'.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_time_by_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probabilities of seropositivity by age based on an age-and-time varying Force-of-Infection (FoI) model. — prob_seroprev_age_time_by_age","title":"Generate probabilities of seropositivity by age based on an age-and-time varying Force-of-Infection (FoI) model. — prob_seroprev_age_time_by_age","text":"function calculates probabilities seropositivity age based age--time-varying FoI model. takes account FoI rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_time_by_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probabilities of seropositivity by age based on an age-and-time varying Force-of-Infection (FoI) model. — prob_seroprev_age_time_by_age","text":"","code":"prob_seroprev_age_time_by_age(foi, seroreversion_rate)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_time_by_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probabilities of seropositivity by age based on an age-and-time varying Force-of-Infection (FoI) model. — prob_seroprev_age_time_by_age","text":"foi dataframe containing FoI values different ages. three columns: 'year', 'age' 'foi'. seroreversion_rate non-negative numeric value representing rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_age_time_by_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probabilities of seropositivity by age based on an age-and-time varying Force-of-Infection (FoI) model. — prob_seroprev_age_time_by_age","text":"dataframe columns 'age' 'seropositivity'.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_by_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","title":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","text":"function generates seropositivity probabilities based either time-varying Force--Infection (FoI) model, age-varying FoI model, age--time-varying FoI model. cases, possible optionally include seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_by_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","text":"","code":"prob_seroprev_by_age(model, foi, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_by_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","text":"model string specifying model type can either '\"age\"', '\"time\"', '\"age-time\"'. foi dataframe containing FoI values. time-varying models columns : year Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI year age-varying models columns :. age Ages starting 1 age oldest person serosurvey foi Corresponding values FoI age age--time-varying models columns : age Ages starting 1 age oldest person serosurvey time Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI age year seroreversion_rate non-negative value determining rate seroreversion (per year). Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_by_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","text":"dataframe columns 'age' 'seropositivity'.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_by_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate probabilities of seropositivity by age based on model choice. — prob_seroprev_by_age","text":"","code":"prob_seroprev_by_age(   model = \"age\",   foi = data.frame(     age = 1:80,     foi = rep(0.01, 80)   ) ) #>    age seropositivity #> 1    1    0.009950166 #> 2    2    0.019801327 #> 3    3    0.029554466 #> 4    4    0.039210561 #> 5    5    0.048770575 #> 6    6    0.058235466 #> 7    7    0.067606180 #> 8    8    0.076883654 #> 9    9    0.086068815 #> 10  10    0.095162582 #> 11  11    0.104165865 #> 12  12    0.113079563 #> 13  13    0.121904569 #> 14  14    0.130641765 #> 15  15    0.139292024 #> 16  16    0.147856211 #> 17  17    0.156335183 #> 18  18    0.164729789 #> 19  19    0.173040866 #> 20  20    0.181269247 #> 21  21    0.189415754 #> 22  22    0.197481202 #> 23  23    0.205466397 #> 24  24    0.213372139 #> 25  25    0.221199217 #> 26  26    0.228948414 #> 27  27    0.236620506 #> 28  28    0.244216259 #> 29  29    0.251736432 #> 30  30    0.259181779 #> 31  31    0.266553044 #> 32  32    0.273850963 #> 33  33    0.281076267 #> 34  34    0.288229677 #> 35  35    0.295311910 #> 36  36    0.302323674 #> 37  37    0.309265669 #> 38  38    0.316138591 #> 39  39    0.322943126 #> 40  40    0.329679954 #> 41  41    0.336349750 #> 42  42    0.342953180 #> 43  43    0.349490905 #> 44  44    0.355963579 #> 45  45    0.362371848 #> 46  46    0.368716354 #> 47  47    0.374997732 #> 48  48    0.381216608 #> 49  49    0.387373606 #> 50  50    0.393469340 #> 51  51    0.399504421 #> 52  52    0.405479452 #> 53  53    0.411395030 #> 54  54    0.417251748 #> 55  55    0.423050190 #> 56  56    0.428790936 #> 57  57    0.434474561 #> 58  58    0.440101633 #> 59  59    0.445672715 #> 60  60    0.451188364 #> 61  61    0.456649131 #> 62  62    0.462055562 #> 63  63    0.467408199 #> 64  64    0.472707576 #> 65  65    0.477954223 #> 66  66    0.483148666 #> 67  67    0.488291422 #> 68  68    0.493383008 #> 69  69    0.498423931 #> 70  70    0.503414696 #> 71  71    0.508355803 #> 72  72    0.513247744 #> 73  73    0.518091010 #> 74  74    0.522886084 #> 75  75    0.527633447 #> 76  76    0.532333573 #> 77  77    0.536986932 #> 78  78    0.541593989 #> 79  79    0.546155205 #> 80  80    0.550671036"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_gen_by_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","title":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","text":"function calculates probabilities seropositivity age based abstract model serocatalytic system.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_gen_by_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","text":"","code":"prob_seroprev_gen_by_age(   construct_A_fun,   calculate_seroprev_fun,   initial_conditions,   max_age,   ... )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_gen_by_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","text":"construct_A_fun function constructs matrix defines multiplier term linear ODE system. calculate_seroprev_fun function takes state vector returns seropositive fraction. initial_conditions initial state vector proportions birth cohort. max_age maximum age simulate seropositivity . ... Additional parameters construct_A_fun","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_gen_by_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","text":"dataframe columns 'age' 'seropositivity'.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_gen_by_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate probabilities of seropositivity by age based on a general Force-of-Infection (FoI) model. — prob_seroprev_gen_by_age","text":"","code":"# define age- and time-specific multipliers foi_df_time <- data.frame(   year = seq(1946, 2025, 1),   foi = c(rep(0, 40), rep(1, 40)) )  foi_df_age <- data.frame(   age = 1:80,   foi = 2 * dlnorm(1:80, meanlog = 3.5, sdlog = 0.5) )  u <- foi_df_age$foi v <- foi_df_time$foi  # function to construct A matrix for one piece construct_A <- function(t, tau, u, v) {   u_bar <- u[t - tau]   v_bar <- v[t]    A <- diag(-1, ncol = 12, nrow = 12)   A[row(A) == (col(A) + 1)] <- 1   A[1, 1] <- -u_bar * v_bar   A[2, 1] <- u_bar * v_bar   A[12, 12] <- 0    A }  # determines the sum of seropositive compartments of those still alive calculate_seropositivity_fn <- function(Y) {   sum(Y[2:11]) / (1 - Y[12]) }  # initial conditions in 12D state vector initial_conditions <- rep(0, 12) initial_conditions[1] <- 1  # calculate probability seropositive_hiv <- prob_seroprev_gen_by_age(   construct_A,   calculate_seropositivity_fn,   initial_conditions,   max_age = 80,   u,   v )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_time_by_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate probabilities of seropositivity by age based on a time-varying Force-of-Infection (FoI) model. — prob_seroprev_time_by_age","title":"Generate probabilities of seropositivity by age based on a time-varying Force-of-Infection (FoI) model. — prob_seroprev_time_by_age","text":"function calculates probabilities seropositivity age based time-varying FoI model. takes account FoI rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_time_by_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate probabilities of seropositivity by age based on a time-varying Force-of-Infection (FoI) model. — prob_seroprev_time_by_age","text":"","code":"prob_seroprev_time_by_age(foi, seroreversion_rate)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_time_by_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate probabilities of seropositivity by age based on a time-varying Force-of-Infection (FoI) model. — prob_seroprev_time_by_age","text":"foi dataframe containing FoI values different years. two columns: 'year' 'foi'. seroreversion_rate non-negative numeric value representing rate seroreversion.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/prob_seroprev_time_by_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate probabilities of seropositivity by age based on a time-varying Force-of-Infection (FoI) model. — prob_seroprev_time_by_age","text":"dataframe columns 'age' 'seropositivity'.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_age_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by age — probability_exact_age_varying","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by age — probability_exact_age_varying","text":"Computes probability seropositive Forces--Infection (FoIs) vary age","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_age_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by age — probability_exact_age_varying","text":"","code":"probability_exact_age_varying(ages, fois, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_age_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by age — probability_exact_age_varying","text":"ages Integer indicating ages exposed cohorts fois Numeric atomic vector corresponding age-varying Force--Infection simulate seroreversion_rate Non-negative seroreversion rate. Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_age_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by age — probability_exact_age_varying","text":"vector probabilities seropositive age-varying FoI including seroreversion (ordered youngest oldest individuals)","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_time_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by time — probability_exact_time_varying","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by time — probability_exact_time_varying","text":"Computes probability seropositive Forces--Infection (FoIs) vary time","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_time_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by time — probability_exact_time_varying","text":"","code":"probability_exact_time_varying(years, fois, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_time_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by time — probability_exact_time_varying","text":"years Integer indicating years covering birth ages sample fois Numeric atomic vector corresponding age-varying FoI simulate seroreversion_rate Non-negative seroreversion rate. Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/probability_exact_time_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the probability of being seropositive when Forces-of-Infection (FoIs) vary by time — probability_exact_time_varying","text":"vector probabilities seropositive age-varying FoI including seroreversion (ordered youngest oldest individuals)","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/serofoi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'serofoi' package. — serofoi-package","title":"The 'serofoi' package. — serofoi-package","text":"DESCRIPTION PACKAGE","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/serofoi-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'serofoi' package. — serofoi-package","text":"Stan Development Team (NA). RStan: R interface Stan. R package version 2.26.22. https://mc-stan.org #' @keywords internal","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/reference/serofoi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'serofoi' package. — serofoi-package","text":"Maintainer: Zulma M. Cucunubá zulma.cucunuba@javeriana.edu.co (ORCID) Authors: Nicolás T. Domínguez ex-ntorres@javeriana.edu.co (ORCID) Ben Lambert Pierre Nouvellet contributors: Geraldine Gómez (ORCID) [contributor] Jaime . Pavlich-Mariscal (ORCID) [contributor] Hugo Gruson (ORCID) [contributor] David Santiago Quevedo (ORCID) [contributor] Miguel Gámez [contributor] Sumali Bajaj [contributor] Everlyn Kamau [contributor] Richard Creswell [contributor] International Development Research Center (IDRC) [funder] Pontificia Universidad Javeriana [copyright holder]","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_foi_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets initialization function for sampling — set_foi_init","title":"Sets initialization function for sampling — set_foi_init","text":"Sets initialization function sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_foi_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets initialization function for sampling — set_foi_init","text":"","code":"set_foi_init(foi_init, is_log_foi, foi_index)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_foi_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets initialization function for sampling — set_foi_init","text":"foi_init Initialization function sampling. null, default chosen depending foi-scale model is_log_foi Boolean set logarithmic scale FoI foi_index Integer vector specifying age-groups Force--Infection values estimated. can specified means get_foi_index","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_foi_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets initialization function for sampling — set_foi_init","text":"Function specifying initialization vector Force--Infection","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_foi_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets initialization function for sampling — set_foi_init","text":"","code":"data(chagas2012) foi_index <- get_foi_index(chagas2012, group_size = 5, model_type = \"age\") foi_init <- set_foi_init(   foi_init = NULL,   is_log_foi = FALSE,   foi_index = foi_index )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_stan_data_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Set stan data defaults for sampling — set_stan_data_defaults","title":"Set stan data defaults for sampling — set_stan_data_defaults","text":"Set stan data defaults sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_stan_data_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set stan data defaults for sampling — set_stan_data_defaults","text":"","code":"set_stan_data_defaults(stan_data, is_log_foi = FALSE, is_seroreversion = FALSE)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_stan_data_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set stan data defaults for sampling — set_stan_data_defaults","text":"stan_data List passed rstan is_log_foi Boolean set logarithmic scale FoI is_seroreversion Boolean specifying whether include seroreversion rate estimation model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/set_stan_data_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set stan data defaults for sampling — set_stan_data_defaults","text":"List default values stan data sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_cauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets Cauchy distribution parameters for sampling — sf_cauchy","title":"Sets Cauchy distribution parameters for sampling — sf_cauchy","text":"Sets Cauchy distribution parameters sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_cauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets Cauchy distribution parameters for sampling — sf_cauchy","text":"","code":"sf_cauchy(location = 0, scale = 1)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_cauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets Cauchy distribution parameters for sampling — sf_cauchy","text":"location Location Cauchy distribution scale Scale Cauchy distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_cauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets Cauchy distribution parameters for sampling — sf_cauchy","text":"List specified statistics name distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_cauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets Cauchy distribution parameters for sampling — sf_cauchy","text":"","code":"my_prior <- sf_cauchy()"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_none.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets empty prior distribution — sf_none","title":"Sets empty prior distribution — sf_none","text":"Sets empty prior distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets empty prior distribution — sf_none","text":"","code":"sf_none()"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets empty prior distribution — sf_none","text":"List name empty distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets normal distribution parameters for sampling — sf_normal","title":"Sets normal distribution parameters for sampling — sf_normal","text":"Sets normal distribution parameters sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets normal distribution parameters for sampling — sf_normal","text":"","code":"sf_normal(mean = 0, sd = 1)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets normal distribution parameters for sampling — sf_normal","text":"mean Mean normal distribution sd Standard deviation normal distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets normal distribution parameters for sampling — sf_normal","text":"List specified statistics name model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets normal distribution parameters for sampling — sf_normal","text":"","code":"my_prior <- sf_normal()"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets uniform distribution parameters for sampling — sf_uniform","title":"Sets uniform distribution parameters for sampling — sf_uniform","text":"Sets uniform distribution parameters sampling","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets uniform distribution parameters for sampling — sf_uniform","text":"","code":"sf_uniform(min = 0, max = 10)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets uniform distribution parameters for sampling — sf_uniform","text":"min Minimum value random variable uniform distribution max Maximum value random variable uniform distribution","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets uniform distribution parameters for sampling — sf_uniform","text":"List specified statistics name model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/sf_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets uniform distribution parameters for sampling — sf_uniform","text":"","code":"my_prior <- sf_uniform()"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","title":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","text":"function generates binned serosurvey data based either time-varying FoI model, age-varying FoI model, age--time-varying FoI model. cases, possible optionally include seroreversion. function allows construction serosurveys binned age groups, generates uncertainty distribution sample size within age bin multinomial sampling.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","text":"","code":"simulate_serosurvey(model, foi, survey_features, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","text":"model string specifying model type can either '\"age\"', '\"time\"', '\"age-time\"'. foi dataframe containing FoI values. time-varying models columns : year Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI year age-varying models columns :. age Ages starting 1 age oldest person serosurvey foi Corresponding values FoI age age--time-varying models columns : age Ages starting 1 age oldest person serosurvey time Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI age year survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ). seroreversion_rate non-negative value determining rate seroreversion (per year). Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","text":"dataframe simulated serosurvey data, including age group information, overall sample sizes, number seropositive individuals, survey features.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate serosurvey data based on various Force-of-Infection (FoI) models. — simulate_serosurvey","text":"","code":"# time-varying model foi_df <- data.frame(   year = seq(1990, 2009, 1),   foi = rnorm(20, 0.1, 0.01) ) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey( model = \"time\", foi = foi_df, survey_features = survey_features)  # age-varying model foi_df <- data.frame(   age = seq(1, 20, 1),   foi = rnorm(20, 0.1, 0.01) ) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey( model = \"age\", foi = foi_df, survey_features = survey_features)  # age-and-time varying model foi_df <- expand.grid(   year = seq(1990, 2009, 1),   age = seq(1, 20, 1) ) foi_df$foi <- rnorm(20 * 20, 0.1, 0.01) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey( model = \"age-time\", foi = foi_df, survey_features = survey_features)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","title":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","text":"function generates binned serosurvey data based age-varying FoI model, optionally including seroreversion. function allows construction serosurveys binned age groups, generates uncertainty distribution sample size within age bin multinomial sampling.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","text":"","code":"simulate_serosurvey_age(foi, survey_features, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","text":"foi dataframe containing FoI values. time-varying models columns : year Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI year age-varying models columns :. age Ages starting 1 age oldest person serosurvey foi Corresponding values FoI age age--time-varying models columns : age Ages starting 1 age oldest person serosurvey time Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI age year survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ). seroreversion_rate non-negative value determining rate seroreversion (per year). Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","text":"dataframe simulated serosurvey data, including age group information, overall sample sizes, number seropositive individuals, survey features.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate serosurvey data based on an age-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age","text":"","code":"# specify FOIs for each year foi_df <- data.frame(   age = seq(1, 20, 1),   foi = rnorm(20, 0.1, 0.01) ) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey_age( foi_df, survey_features)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","title":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","text":"function generates binned serosurvey data based age--time-varying FoI model, optionally including seroreversion. function allows construction serosurveys binned age groups, generates uncertainty distribution sample size within age bin multinomial sampling.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","text":"","code":"simulate_serosurvey_age_time(foi, survey_features, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","text":"foi dataframe containing FoI values. time-varying models columns : year Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI year age-varying models columns :. age Ages starting 1 age oldest person serosurvey foi Corresponding values FoI age age--time-varying models columns : age Ages starting 1 age oldest person serosurvey time Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI age year survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ). seroreversion_rate non-negative value determining rate seroreversion (per year). Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","text":"dataframe simulated serosurvey data, including age group information, overall sample sizes, number seropositive individuals, survey features.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_age_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate serosurvey data based on an age-and-time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_age_time","text":"","code":"# specify FOIs for each year foi_df <- expand.grid(   year = seq(1990, 2009, 1),   age = seq(1, 20, 1) ) foi_df$foi <- rnorm(20 * 20, 0.1, 0.01) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey_age_time( foi_df, survey_features)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_general.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","title":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","text":"simulation method assumes model system can written piecewise-linear ordinary differential equation system.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_general.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","text":"","code":"simulate_serosurvey_general(   construct_A_fun,   calculate_seroprev_fun,   initial_conditions,   survey_features,   ... )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_general.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","text":"construct_A_fun function constructs matrix defines multiplier term linear ODE system. calculate_seroprev_fun function takes state vector returns seropositive fraction. initial_conditions initial state vector proportions birth cohort. survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ). ... Additional parameters construct_A_fun","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_general.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","text":"dataframe simulated serosurvey data, including age group information, overall sample sizes, number seropositive individuals, survey features.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_general.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate serosurvey data based on general serocatalytic model. — simulate_serosurvey_general","text":"","code":"foi_df_time <- data.frame(   year = seq(1946, 2025, 1),   foi = c(rep(0, 40), rep(1, 40)) )  foi_df_age <- data.frame(   age = 1:80,   foi = 2 * dlnorm(1:80, meanlog = 3.5, sdlog = 0.5) )  # generate age and time dependent FoI from multipliers foi_age_time <- expand.grid(   year = foi_df_time$year,   age = foi_df_age$age ) |>   dplyr::left_join(foi_df_age, by = \"age\") |>   dplyr::rename(foi_age = foi) |>   dplyr::left_join(foi_df_time, by = \"year\") |>   dplyr::rename(foi_time = foi) |>   dplyr::mutate(foi = foi_age * foi_time) |>   dplyr::select(-c(\"foi_age\", \"foi_time\"))  # create survey features for simulating max_age <- 80 n_sample <- 50 survey_features <- data.frame(   age_min = seq(1, max_age, 5),   age_max = seq(5, max_age, 5)) |>   dplyr::mutate(n_sample = rep(n_sample, length(age_min))   )  # simulate survey from age and time FoI serosurvey <- simulate_serosurvey(   model = \"age-time\",   foi = foi_age_time,   survey_features = survey_features )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","title":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","text":"function generates binned serosurvey data based time-varying FoI model, optionally including seroreversion. function allows construction serosurveys binned age groups, generates uncertainty distribution sample size within age bin multinomial sampling.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","text":"","code":"simulate_serosurvey_time(foi, survey_features, seroreversion_rate = 0)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","text":"foi dataframe containing FoI values. time-varying models columns : year Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI year age-varying models columns :. age Ages starting 1 age oldest person serosurvey foi Corresponding values FoI age age--time-varying models columns : age Ages starting 1 age oldest person serosurvey time Calendar years starting birth year oldest person time serosurvey foi Corresponding values FoI age year survey_features dataframe containing information binned age groups sample sizes . contain columns: age_min Left limits age groups considered serosurvey age_max Right limits age groups considered serosurvey n_sample Number samples age group resulting age intervals closed left [ open right ). seroreversion_rate non-negative value determining rate seroreversion (per year). Default 0.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","text":"dataframe simulated serosurvey data, including age group information, overall sample sizes, number seropositive individuals, survey features.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/simulate_serosurvey_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate serosurvey data based on a time-varying Force-of-Infection (FoI) model. — simulate_serosurvey_time","text":"","code":"# specify FOIs for each year foi_df <- data.frame(   year = seq(1990, 2009, 1),   foi = rnorm(20, 0.1, 0.01) ) survey_features <- data.frame(   age_min = c(1, 3, 15),   age_max = c(2, 14, 20),   n_sample = c(1000, 2000, 1500)) serosurvey <- simulate_serosurvey_time( foi_df, survey_features)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_central_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise central estimate — summarise_central_estimate","title":"Summarise central estimate — summarise_central_estimate","text":"Summarise central estimate","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_central_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise central estimate — summarise_central_estimate","text":"","code":"summarise_central_estimate(   seromodel,   serosurvey,   alpha,   par_name = \"seroreversion_rate\",   central_estimate_digits = 2 )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_central_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise central estimate — summarise_central_estimate","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used par_name String specifying parameter extracted seromodel central_estimate_digits Number central estimate digits","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_central_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise central estimate — summarise_central_estimate","text":"Text summarising specified central estimate","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_central_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise central estimate — summarise_central_estimate","text":"","code":"data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.005 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.005 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.002 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.004 seconds (Total) #> Chain 4:  #> Warning: The largest R-hat is 1.07, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess summarise_central_estimate(   seromodel,   veev2012,   alpha = 0.05,   par_name = \"foi\"   ) #> [1] \"0.083(95% CI, 0.065-0.11)\""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_loo_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specified loo estimate — summarise_loo_estimate","title":"Extract specified loo estimate — summarise_loo_estimate","text":"Extract specified loo estimate","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_loo_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specified loo estimate — summarise_loo_estimate","text":"","code":"summarise_loo_estimate(   seromodel,   par_loo_estimate = \"elpd_loo\",   loo_estimate_digits = 2 )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_loo_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specified loo estimate — summarise_loo_estimate","text":"seromodel stan_fit object obtained sampling model fit_seromodel par_loo_estimate Name loo estimate extracted. Available options : \"elpd_loo\" Expected log pointwise predictive density \"p_loo\" Effective number parameters \"looic\" Leave-one-cross-validation information criteria additional information refer loo. loo_estimate_digits Number loo estimate digits","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_loo_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specified loo estimate — summarise_loo_estimate","text":"Text summarising specified loo estimate","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_loo_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specified loo estimate — summarise_loo_estimate","text":"","code":"data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.7e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.17 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 1.3e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.004 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.006 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.004 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.006 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess summarise_loo_estimate(seromodel) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> [1] \"-22.84(se=11.44)\""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_seromodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise specified model — summarise_seromodel","title":"Summarise specified model — summarise_seromodel","text":"Summarise specified model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_seromodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise specified model — summarise_seromodel","text":"","code":"summarise_seromodel(   seromodel,   serosurvey,   alpha = 0.05,   par_loo_estimate = \"elpd_loo\",   loo_estimate_digits = 1,   central_estimate_digits = 2,   rhat_digits = 2 )"},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_seromodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise specified model — summarise_seromodel","text":"seromodel stan_fit object obtained sampling model fit_seromodel serosurvey survey_year Year survey took place (needed plot time models) age_min Floor value average age_min age_max age_max size sample n_sample Number samples age group n_seropositive Number positive samples age group alpha 1 - alpha indicates credibility level used par_loo_estimate Name loo estimate extracted. Available options : \"elpd_loo\" Expected log pointwise predictive density \"p_loo\" Effective number parameters \"looic\" Leave-one-cross-validation information criteria additional information refer loo. loo_estimate_digits Number loo estimate digits central_estimate_digits Number central estimate digits rhat_digits Number rhat estimate digits","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_seromodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise specified model — summarise_seromodel","text":"list summarising specified model model_name Name model elpd elpd standard deviation foi Estimated foi credible interval ('constant' model) foi_rhat foi rhat value ('constant' model) seroreversion_rate Estimated seroreversion rate seroreversion_rate_rhat Seroreversion rate rhat value","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/summarise_seromodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise specified model — summarise_seromodel","text":"","code":"data(veev2012) seromodel <- fit_seromodel(veev2012, iter = 100) #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 1). #> Chain 1: Rejecting initial value: #> Chain 1:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 1:   Stan can't start sampling from this initial value. #> Chain 1:  #> Chain 1: Gradient evaluation took 1.6e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.16 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: WARNING: There aren't enough warmup iterations to fit the #> Chain 1:          three stages of adaptation as currently configured. #> Chain 1:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 1:          the given number of warmup iterations: #> Chain 1:            init_buffer = 7 #> Chain 1:            adapt_window = 38 #> Chain 1:            term_buffer = 5 #> Chain 1:  #> Chain 1: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 1:                0.002 seconds (Sampling) #> Chain 1:                0.005 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 2). #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2: Rejecting initial value: #> Chain 2:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 2:   Stan can't start sampling from this initial value. #> Chain 2:  #> Chain 2: Gradient evaluation took 1.4e-05 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.14 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 2:                0.002 seconds (Sampling) #> Chain 2:                0.005 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 3). #> Chain 3: Rejecting initial value: #> Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 3:   Stan can't start sampling from this initial value. #> Chain 3: Rejecting initial value: #> Chain 3:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 3:   Stan can't start sampling from this initial value. #> Chain 3:  #> Chain 3: Gradient evaluation took 1.3e-05 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: WARNING: There aren't enough warmup iterations to fit the #> Chain 3:          three stages of adaptation as currently configured. #> Chain 3:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 3:          the given number of warmup iterations: #> Chain 3:            init_buffer = 7 #> Chain 3:            adapt_window = 38 #> Chain 3:            term_buffer = 5 #> Chain 3:  #> Chain 3: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 3: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 3: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 3: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 3: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 3: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 3: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 3: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 3: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 3: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 3: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 3: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 3:                0.002 seconds (Sampling) #> Chain 3:                0.005 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'constant_no_seroreversion' NOW (CHAIN 4). #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4: Rejecting initial value: #> Chain 4:   Log probability evaluates to log(0), i.e. negative infinity. #> Chain 4:   Stan can't start sampling from this initial value. #> Chain 4:  #> Chain 4: Gradient evaluation took 1.3e-05 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: WARNING: There aren't enough warmup iterations to fit the #> Chain 4:          three stages of adaptation as currently configured. #> Chain 4:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 4:          the given number of warmup iterations: #> Chain 4:            init_buffer = 7 #> Chain 4:            adapt_window = 38 #> Chain 4:            term_buffer = 5 #> Chain 4:  #> Chain 4: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 4: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 4: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 4: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 4: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 4: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 4: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 4: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 4: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 4: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 4: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 4: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.003 seconds (Warm-up) #> Chain 4:                0.002 seconds (Sampling) #> Chain 4:                0.005 seconds (Total) #> Chain 4:  #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess summarise_seromodel(seromodel, veev2012) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> $model_name #> [1] \"constant_no_seroreversion\" #>  #> $elpd_loo #> [1] \"-23.3(se=11.9)\" #>  #> $foi #> [1] \"0.083(95% CI, 0.064-0.11)\" #>  #> $foi_rhat #> [1] 1.1 #>  #> $converged #> [1] \"no\" #>"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate FoI structure for simulation — validate_foi_df","title":"Helper function to validate FoI structure for simulation — validate_foi_df","text":"Helper function validate FoI structure simulation","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate FoI structure for simulation — validate_foi_df","text":"","code":"validate_foi_df(foi_df, cnames_additional)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate FoI structure for simulation — validate_foi_df","text":"None","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate FoI index consistency — validate_foi_index","title":"Helper function to validate FoI index consistency — validate_foi_index","text":"Helper function validate FoI index consistency","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate FoI index consistency — validate_foi_index","text":"","code":"validate_foi_index(foi_index, serosurvey, model_type)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_foi_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate FoI index consistency — validate_foi_index","text":"foi_index","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_plot_constant.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate whether the current plot corresponds to a constant model — validate_plot_constant","title":"Helper function to validate whether the current plot corresponds to a constant model — validate_plot_constant","text":"Helper function validate whether current plot corresponds constant model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_plot_constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate whether the current plot corresponds to a constant model — validate_plot_constant","text":"","code":"validate_plot_constant(plot_constant, x_axis, model_name, error_msg_x_axis)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_plot_constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate whether the current plot corresponds to a constant model — validate_plot_constant","text":"TRUE","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_seroreversion_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate seroreversion rate properties for simulation — validate_seroreversion_rate","title":"Helper function to validate seroreversion rate properties for simulation — validate_seroreversion_rate","text":"Helper function validate seroreversion rate properties simulation","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_seroreversion_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate seroreversion rate properties for simulation — validate_seroreversion_rate","text":"","code":"validate_seroreversion_rate(seroreversion_rate)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_seroreversion_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate seroreversion rate properties for simulation — validate_seroreversion_rate","text":"None","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_serosurvey.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate serosurvey structure — validate_serosurvey","title":"Helper function to validate serosurvey structure — validate_serosurvey","text":"Helper function validate serosurvey structure","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_serosurvey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate serosurvey structure — validate_serosurvey","text":"","code":"validate_serosurvey(serosurvey)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate consistency between the FoI and the survey features for simulation — validate_simulation_age","title":"Helper function to validate consistency between the FoI and the survey features for simulation — validate_simulation_age","text":"Helper function validate consistency FoI survey features simulation","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate consistency between the FoI and the survey features for simulation — validate_simulation_age","text":"","code":"validate_simulation_age(survey_features, foi_df)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate consistency between the FoI and the survey features for simulation — validate_simulation_age","text":"None","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate consistency between the FoI and the survey features for simulation of age- and time-varying model — validate_simulation_age_time","title":"Helper function to validate consistency between the FoI and the survey features for simulation of age- and time-varying model — validate_simulation_age_time","text":"Helper function validate consistency FoI survey features simulation age- time-varying model","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate consistency between the FoI and the survey features for simulation of age- and time-varying model — validate_simulation_age_time","text":"","code":"validate_simulation_age_time(survey_features, foi_df)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_simulation_age_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate consistency between the FoI and the survey features for simulation of age- and time-varying model — validate_simulation_age_time","text":"None","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_survey_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to validate serosurvey features for simulation — validate_survey_features","title":"Helper function to validate serosurvey features for simulation — validate_survey_features","text":"Helper function validate serosurvey features simulation","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_survey_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to validate serosurvey features for simulation — validate_survey_features","text":"","code":"validate_survey_features(survey_features)"},{"path":"https://epiverse-trace.github.io/serofoi/reference/validate_survey_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to validate serosurvey features for simulation — validate_survey_features","text":"None","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/veev2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Venezuelan Equine Encephalitis Virus (VEEV) seroprevalence data in serofoi — veev2012","title":"Venezuelan Equine Encephalitis Virus (VEEV) seroprevalence data in serofoi — veev2012","text":"Datasets measure seroprevalence IgG antibodies VEEV rural village Panamá 2012 [Carrera2020].","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/veev2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Venezuelan Equine Encephalitis Virus (VEEV) seroprevalence data in serofoi — veev2012","text":"","code":"data(veev2012)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/reference/veev2012.html","id":"veev-","dir":"Reference","previous_headings":"","what":"veev2012","title":"Venezuelan Equine Encephalitis Virus (VEEV) seroprevalence data in serofoi — veev2012","text":"<data.frame> 4 rows 5 columns: survey_year Year serosurvey conducted n_sample Number collected samples per age group n_seropositive Number positive samples per age group age_min Age group minimal age age_max Age group maximal age","code":""},{"path":"https://epiverse-trace.github.io/serofoi/reference/veev2012.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Venezuelan Equine Encephalitis Virus (VEEV) seroprevalence data in serofoi — veev2012","text":"","code":"data(veev2012)"},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"new-features-1-0-3","dir":"Changelog","previous_headings":"","what":"New features","title":"serofoi 1.0.3","text":"Add options plot single FOI estimates r-hats: introduced parameters plot_constant x_axis visualisation functions package. enable option plot constant FoI estimates corresponding r-hat values, avoiding ambiguity specification x-axis means x_axis = \"time\" x_axis = \"age\".","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"minor-changes-1-0-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"serofoi 1.0.3","text":"Fix incorrect cross referencing documentation Update table 1 article foi_models show prior specification options available package. Add example particular model specification using package article foi_models Complete missing documentation tags. Change seroprevalence_ seropositive_ seroprev_ Change probability_ prob_ Remove _model Make consistent use Force--Infection (FoI) acronym across package Fix broken link contributing guidelines README","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"internal-changes-1-0-3","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serofoi 1.0.3","text":"Implement lintr v3.2.0 new suggestions Update stan code use new syntax. Update workflows based Epiverse template. Remove Hmisc dependency. Replace Matrix package expm Add donttest examples taking long run","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"serofoi 1.0.2","text":"Introduce enhanced data simulation functionalities support broader range use cases serosurvey analysis. Add dedicated vignette data simulation guide users simulating data serosurveys. Add forward random walk age-varying models uniform normal priors. Improves previous implementation forward random walk time-varying models. Enables prior distributions specifications means package specific functions like sf_normal() sf_uniform(). Support seroreversion rate estimation models uniform normal priors.","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"breaking-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"serofoi 1.0.2","text":"Replaced old modelling visualization functions, making Bayesian model selection specification flexible. New models functionalities include constant, time-varying, age-varying models, well options estimating seroreversion rates. Updated R-hat convergence threshold model convergence diagnostics R-hat<1.01, following Vehtari et al. (2021).","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"minor-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"serofoi 1.0.2","text":"Remove simdata_* datasets package replaced code-based simulation vignettes. Add missing examples exported functions Add missing documentation entries","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"internal-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serofoi 1.0.2","text":"fit_seromodel() function (#213). Visualization functionalities (#215). build_stan_data related functions (#232). Validation functions (#235). Test coverage increased 100% Replaced static simulated datasets tests vignettes dynamic examples using data simulation functions. Enhanced documentation new functionalities updated vignettes reflect recent changes.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"serofoi 0.1.0","text":"Data simulation functions time-varying age-varying force infection trends. following example simulate constant (time) force infection: generate grouped serosurveys function group_sim_data can used:","code":"foi_sim_constant <- rep(0.02, 50)  serodata_constant <- generate_sim_data(   sim_data = data.frame(     age = seq(1, 50),     tsur = 2050),   foi = foi_sim_constant,   sample_size_by_age = 5 ) serodata_constant <- group_sim_data(serodata_constant, step = 5)"},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"serofoi 0.1.0","text":"Simplifies fit_seromodel output , output fit_seromodel list: Now, output stan_fit object obtained rstan::sampling. , plotting functionalities now require serodata input. Initial prior distribution parameters foi_location foi_scale can specified explicitly fit_seromodel: Depending selected model foi_model, meaning parameters change. tv_normal_log model parameters must logarithmic scale; recommended usage : , models estimated one value force infection per year time spanned serosurvey: Now, amount force infection values estimated models depend specified chunk structure. can either specified size: explicitly: Deprecate run_seromodel. Initially function intended handler fit_seromodel cases user may need implement model multiple independent serosurveys; now plan showcase examples using current functionalities package (added future versions vignettes).","code":"seromodel_object <- list(     fit = fit,     seromodel_fit = seromodel_fit,     serodata = serodata,     serodata = serodata,     stan_data = stan_data,     ...   ) seromodel <- fit_seromodel(   serodata,   foi_model = \"tv_normal\",   foi_location = 0,   foi_scale = 1 ) seromodel <- fit_seromodel(   serodata,   foi_model = \"tv_normal_log\",   foi_location = -6,   foi_scale = 4 ) data(chagas2012) serodata <- prepare_serodata(chagas2012) seromodel <- fit_seromodel(serodata, foi_model = \"tv_normal\") seromodel <- fit_seromodel(serodata, foi_model = \"tv_normal\", chunk_size = 10) chunks <- rep(c(1, 2, 3, 4, 5), c(10, 10, 15, 15, max(serodata$age_mean_f)-50)) seromodel <- fit_seromodel(serodata, foi_model = \"tv_normal\", chunks = chunks)"},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"minor-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"serofoi 0.1.0","text":"plot_seroprev allows data binning (age group manipulation) means parameters bin_data=TRUE bin_step. Automatic selection ymin ymax aesthetics plotting functions (exception plot_rhats). Correct input validation Remove duplicated data veev2012 dataset","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"internal-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"serofoi 0.1.0","text":"Remove large files git history (see #77). Added input validation following functions: prepare_serodata generate_sim_data get_age_group fit_seromodel extract_seromodel_summary plot_seroprev plot_seroprev_fitted plot_foi plot_seromodel Unit testing: Separate modelling tests model Use dplyr::near test models statistical validity Add tests data simulation functions Update package template accordance {packagetemplate}","code":""},{"path":"https://epiverse-trace.github.io/serofoi/news/index.html","id":"serofoi-009","dir":"Changelog","previous_headings":"","what":"serofoi 0.0.9","title":"serofoi 0.0.9","text":"release serofoi, includes following: Implementation package modules: Incorporates data preparation, modelling, visualization modules, enable efficient handling data, perform statistical modelling, generate visual representations results. Documentation: consists vignettes, website, uses cases provide detailed instructions use package effectively. Implementation 3 models calculating Force--Infection (FoI): first model constant endemic model, assumes stable FoI time. second third models time-varying, normal FoI model representing slow change FoI normal-log FoI model representing fast epidemic change FoI. Definition coverage test assurance quality package. Overall, release introduces essential package functionality, comprehensive documentation, various FoI models, coverage test, enabling users analyse seroprevalence data calculate Force--infection.","code":""}]
